{"version":3,"mappings":"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","names":["Skeleton","height","StagesCustomization","mainViewVisibility","stageViewPosition","setStageViewPosition","useLayoutPreferences","isMobile","e","jsxs","Fragment","jsx","ViewIcon","MainViewVisibility","StageViewPosition","FilterContext","createContext","Result","FilterProvider","children","useState","toggleStatus","key","setVisibleStatuses","visibleStatuses","s","resetStatuses","defaultStatuses","useFilter","context","useContext","Filter","visible","setVisible","allVisible","statuses","show","DefaultDropdownProps","item","index","classNames","hide","DataTreeView","stages","selected","onNodeSelect","search","event","nodeId","filteredStages","stage","TreeNode","hasSelectedDescendant","memo","hasChildren","isSelected","isExpanded","setIsExpanded","handleToggleClick","useEffect","onSelect","LiveTotal","child","filterStageTree","filteredChildren","POLL_INTERVAL","updateStepBuffer","stepId","forceUpdate","TAIL_CONSOLE_LOG","stepBuffer","isTailing","startByte","consoleAnnotator","backOff","resolve","getConsoleTextOffset","response","newLogLines","exceptionText","useStepsPoller","props","run","useRunPoller","setOpenStage","expandedSteps","setExpandedSteps","collapsedSteps","useRef","setSteps","stepBuffersRef","stepBuffers","updateStepConsoleOffset","useCallback","promise","_a","setStepBuffers","parseUrlParams","steps","params","step","prev","selectedStep","stepResult","selectedStepResult","nextStepsSerialized","defaultStep","polling","data","updateStepsIfChanged","stepsForStage","lastStep","openStage","onStepToggle","id","onMoreConsoleClick","stageId","buffers","findStage","getStageStepBuffers","handleStageSelect","fetchExceptionText","ConsoleLogStream","lazy","__vitePreload","fetchData","consoleBuildOutput","getConsoleBuildOutput","NoStageStepsFallback","setLogBuffer","err","logBuffer","ScrollToTopBottom","setIsAtTop","isAtBottom","isScrollable","updateScrollState","docHeight","atTop","scrollTop","atBottom","scrollable","windowHeight","setIsScrollable","observer","scrollToTop","SplitView","setTreeViewWidth","setStageViewWidth","setStageViewHeight","treeViewWidth","stageViewWidth","stageViewHeight","direction","isDragging","isVertical","storageKey","setPanelSize","initialSize","startDragging","setIsDragging","handleDragging","newSize","getContainerOffset","clampedSize","handleDoubleClick","resetSize","containerRef","rect","stopDragging","Children","childrenArray","gridTemplate","StageNodeLink","agent","href","getAgentUrl","name","agentName","EMOJI_VARIATION","OBJECT_REPLACEMENT","tlds","init$2","customSchemes","State","utlds","decodeTlds","encodedUtlds","tt","Start","APOSTROPHE","OPENBRACKET","CLOSEBRACKET","CLOSEPAREN","FULLWIDTHRIGHTPAREN","LEFTCORNERBRACKET","RIGHTCORNERBRACKET","LEFTWHITECORNERBRACKET","RIGHTWHITECORNERBRACKET","FULLWIDTHLESSTHAN","FULLWIDTHGREATERTHAN","AMPERSAND","CARET","COMMA","DOLLAR","DOT","EQUALS","EXCLAMATION","PIPE","QUERY","QUOTE","SLASH","TILDE","BACKSLASH","FULLWIDTHMIDDLEDOT","DIGIT","NUM","tr","Num","Asciinumeric","asciinumeric","Alphanumeric","ASCII_LETTER","ascii","Word","UWord","LETTER","UWORD","alpha","Nl","LF","CR","whitespace","Ws","SPACE","Cr","EMOJI","EMOJI$1","emoji","Emoji","wordjr","uwordjr","i","WORD","UTLD","TLD","addToGroups","fastts","SLASH_SCHEME","a","flags","sch","numeric","ts","LOCALHOST","groups","tk","run$1","start","str","iterable","stringToArray","c","charCount","tokens","charCursor","tokenLength","nextState","state","sinceAccepts","charsSinceAccepts","latestAccepting","cursor","len","second","char","first","result","input","t","defaultt","jr","next","encoded","words","digits","popDigitCount","stack","popCount","defaults","noop","opts","o","Options","ignoredTags","defaultRender","ir","token","isCallable","operator","option","obj","MultiToken","value","scheme","options","truncate","formatted","val","tagName","content","className","target","rel","eventListeners","attributes","formattedHref","attrs","Token","p","type","Email","createTokenClass","Text","makeState","arg","PERCENT","PLUS","POUND","SYM","UNDERSCORE","qsNonAccepting","COLON","SEMI","OPENANGLEBRACKET","CLOSEANGLEBRACKET","OPENBRACE","CLOSEBRACE","OPENPAREN","FULLWIDTHLEFTPAREN","localpartAccepting","ASTERISK","BACKTICK","HYPHEN","Localpart","ta","SlashScheme","Scheme","LocalpartAt","AT","LocalpartDot","EmailDomain","EmailDomainDot","Email$1","EmailDomainHyphen","EmailColon","Domain","DomainHyphen","DomainDot","DomainDotTld","Url","DomainDotTldColon","UrlNonaccept","Url$1","qsAccepting","DomainDotTldColonPort","SlashSchemeColon","SlashSchemeColonSlash","UriPrefix","SchemeColon","bracketPairs","OPEN","UrlOpen","UrlOpenQ","UrlOpenSyms","CLOSE","NL","multis","textTokens","secondState","multiLength","initMultiToken","Multi","subtokens","endIdx","startIdx","init","INIT","tokenize","meta","elements","stepItemData","ConsoleLogCard","StageView","StageDetails","StageSteps","PipelineConsole","rootElement","openStageSteps","openStageStepBuffers","currentRunPath","previousRunPath","showSplitView","loading","isOnlyPlaceholderNode","canConfigure","useUserPermissions","DropdownPortal","Dropdown","SETTINGS","Stages","_","App","locale","ResourceBundleName","UserPreferencesProvider","LayoutPreferencesProvider","root","createRoot"],"ignoreList":[12,13],"sources":["../../../frontend/pipeline-console-view/pipeline-console/main/components/skeleton.tsx","../../../frontend/pipeline-console-view/pipeline-console/main/components/stages-customization.tsx","../../../frontend/pipeline-console-view/pipeline-console/main/providers/filter-provider.tsx","../../../frontend/common/components/filter.tsx","../../../frontend/pipeline-console-view/pipeline-console/main/DataTreeView.tsx","../../../frontend/pipeline-console-view/pipeline-console/main/PipelineConsoleModel.tsx","../../../frontend/pipeline-console-view/pipeline-console/main/hooks/use-steps-poller.ts","../../../frontend/pipeline-console-view/pipeline-console/main/NoStageStepsFallback.tsx","../../../frontend/pipeline-console-view/pipeline-console/main/scroll-to-top-bottom.tsx","../../../frontend/pipeline-console-view/pipeline-console/main/split-view.tsx","../../../frontend/pipeline-console-view/pipeline-console/main/StageNodeLink.tsx","../../../frontend/pipeline-console-view/pipeline-console/main/stage-details.tsx","../../../../../node_modules/linkifyjs/dist/linkify.mjs","../../../../../node_modules/linkify-react/dist/linkify-react.mjs","../../../frontend/pipeline-console-view/pipeline-console/main/ConsoleLogCard.tsx","../../../frontend/pipeline-console-view/pipeline-console/main/stage-steps.tsx","../../../frontend/pipeline-console-view/pipeline-console/main/StageView.tsx","../../../frontend/pipeline-console-view/pipeline-console/main/PipelineConsole.tsx","../../../frontend/pipeline-console-view/app.tsx","../../../frontend/pipeline-console-view/index.tsx"],"sourcesContent":["import \"./skeleton.scss\";\n\nexport default function Skeleton({ height }: { height?: number }) {\n  return (\n    <div\n      className={\"pgv-skeleton\"}\n      style={\n        height\n          ? {\n              height: `${height}rem`,\n            }\n          : {}\n      }\n    />\n  );\n}\n","import \"./stages-customization.scss\";\n\nimport { ChangeEvent } from \"react\";\n\nimport {\n  MainViewVisibility,\n  StageViewPosition,\n  useLayoutPreferences,\n} from \"../providers/user-preference-provider.tsx\";\n\nexport default function StagesCustomization() {\n  const {\n    mainViewVisibility,\n    setMainViewVisibility,\n    stageViewPosition,\n    setStageViewPosition,\n    isMobile,\n  } = useLayoutPreferences();\n\n  if (isMobile) {\n    return null;\n  }\n\n  const handleViewChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setMainViewVisibility(e.target.value as MainViewVisibility);\n  };\n\n  const handlePositionChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setStageViewPosition(e.target.value as StageViewPosition);\n  };\n\n  return (\n    <>\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"main-view-visibility\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <ViewIcon\n            mainViewVisibility={mainViewVisibility}\n            stageViewPosition={stageViewPosition}\n          />\n        </div>\n        Views\n        <span>\n          {mainViewVisibility === MainViewVisibility.BOTH && \"Graph and stages\"}\n          {mainViewVisibility === MainViewVisibility.GRAPH_ONLY && \"Graph\"}\n          {mainViewVisibility === MainViewVisibility.STAGES_ONLY && \"Stages\"}\n        </span>\n        <select\n          id=\"main-view-visibility\"\n          value={mainViewVisibility}\n          onChange={handleViewChange}\n        >\n          <option value={MainViewVisibility.BOTH}>Graph and stages</option>\n          <option value={MainViewVisibility.GRAPH_ONLY}>Graph</option>\n          <option value={MainViewVisibility.STAGES_ONLY}>Stages</option>\n        </select>\n      </label>\n\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"stage-view-position\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <circle\n              cx=\"128\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <circle\n              cx=\"256\"\n              cy=\"416\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n              d=\"M256 256v112\"\n            />\n            <circle\n              cx=\"384\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              d=\"M128 144c0 74.67 68.92 112 128 112M384 144c0 74.67-68.92 112-128 112\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n          </svg>\n        </div>\n        Graph position\n        <span>\n          {stageViewPosition === StageViewPosition.TOP ? \"Top\" : \"Left\"}\n        </span>\n        <select\n          id=\"stage-view-position\"\n          value={stageViewPosition}\n          onChange={handlePositionChange}\n          disabled={mainViewVisibility === MainViewVisibility.STAGES_ONLY}\n        >\n          <option value={StageViewPosition.TOP}>Top</option>\n          <option value={StageViewPosition.LEFT}>Left</option>\n        </select>\n      </label>\n      <div className=\"jenkins-dropdown__separator\" />\n    </>\n  );\n}\n\nfunction ViewIcon({\n  mainViewVisibility,\n  stageViewPosition,\n}: {\n  mainViewVisibility: MainViewVisibility;\n  stageViewPosition: StageViewPosition;\n}) {\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n          <line x1=\"184\" y1=\"180\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"left\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"150\" y1=\"100\" x2=\"150\" y2=\"420\" />\n          <line x1=\"280\" y1=\"100\" x2=\"280\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (\n    mainViewVisibility === \"stagesOnly\" ||\n    (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"left\")\n  ) {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"184\" y1=\"100\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n}\n","import { createContext, ReactNode, useContext, useState } from \"react\";\n\nimport { Result } from \"../../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\ninterface FilterContextType {\n  visibleStatuses: Result[];\n  toggleStatus: (key: Result) => void;\n  resetStatuses: () => void;\n  allVisible: boolean;\n  search: string;\n  setSearch: (value: string) => void;\n}\n\nconst FilterContext = createContext<FilterContextType | undefined>(undefined);\n\nconst defaultStatuses: Result[] = [\n  Result.running,\n  Result.success,\n  Result.failure,\n  Result.unstable,\n  Result.aborted,\n  Result.skipped,\n  Result.not_built,\n];\n\nexport const FilterProvider = ({ children }: { children: ReactNode }) => {\n  const [visibleStatuses, setVisibleStatuses] = useState<Result[]>([]);\n  const [search, setSearch] = useState(\"\");\n\n  const toggleStatus = (key: Result) => {\n    if (visibleStatuses.includes(key as Result)) {\n      setVisibleStatuses(visibleStatuses.filter((s) => s !== (key as Result)));\n    } else {\n      setVisibleStatuses([...visibleStatuses, key as Result]);\n    }\n  };\n\n  const resetStatuses = () => {\n    setVisibleStatuses([]);\n  };\n\n  return (\n    <FilterContext.Provider\n      value={{\n        visibleStatuses:\n          visibleStatuses.length > 0 ? visibleStatuses : defaultStatuses,\n        toggleStatus,\n        resetStatuses,\n        allVisible:\n          (visibleStatuses.length > 0 ? visibleStatuses : defaultStatuses)\n            .length === defaultStatuses.length,\n        search,\n        setSearch,\n      }}\n    >\n      {children}\n    </FilterContext.Provider>\n  );\n};\n\nexport const useFilter = (): FilterContextType => {\n  const context = useContext(FilterContext);\n  if (!context) {\n    throw new Error(\"useFilter must be used within a FilterProvider\");\n  }\n  return context;\n};\n","import \"./filter.scss\";\n\nimport Tippy from \"@tippyjs/react\";\nimport { useState } from \"react\";\n\nimport { useFilter } from \"../../pipeline-console-view/pipeline-console/main/providers/filter-provider.tsx\";\nimport { Result } from \"../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { classNames } from \"../utils/classnames.ts\";\nimport { DefaultDropdownProps } from \"./dropdown.tsx\";\nimport StatusIcon from \"./status-icon.tsx\";\nimport Tooltip from \"./tooltip.tsx\";\n\nexport default function Filter({ disabled }: FilterProps) {\n  const [visible, setVisible] = useState(false);\n  const { visibleStatuses, toggleStatus, resetStatuses, allVisible } =\n    useFilter();\n\n  const statuses = [\n    {\n      key: \"running\",\n      text: \"Running\",\n      status: Result.running,\n    },\n    {\n      key: \"success\",\n      text: \"Successful\",\n      status: Result.success,\n    },\n    {\n      key: \"failure\",\n      text: \"Failed\",\n      status: Result.failure,\n    },\n    {\n      key: \"unstable\",\n      text: \"Unstable\",\n      status: Result.unstable,\n    },\n    {\n      key: \"aborted\",\n      text: \"Aborted\",\n      status: Result.aborted,\n    },\n    {\n      key: \"skipped\",\n      text: \"Skipped\",\n      status: Result.skipped,\n    },\n    {\n      key: \"not_built\",\n      text: \"Not built\",\n      status: Result.not_built,\n    },\n  ];\n\n  const show = () => setVisible(true);\n  const hide = () => setVisible(false);\n\n  return (\n    <Tooltip content={\"Filter\"}>\n      <Tippy\n        {...DefaultDropdownProps}\n        visible={visible}\n        onClickOutside={hide}\n        placement=\"bottom\"\n        appendTo={document.body}\n        offset={[0, -1]}\n        content={\n          <div className=\"jenkins-dropdown\" data-testid=\"filter-dropdown\">\n            <div className=\"jenkins-dropdown__heading\">\n              Filter\n              {!allVisible && (\n                <button\n                  className={\n                    \"jenkins-button jenkins-button--tertiary jenkins-!-accent-color pgv-reset-button\"\n                  }\n                  onClick={resetStatuses}\n                >\n                  Reset\n                </button>\n              )}\n            </div>\n            {statuses.map((item, index) => (\n              <button\n                key={index}\n                className={classNames(\n                  \"jenkins-dropdown__item\",\n                  \"pgv-filter-button\",\n                  {\n                    \"pgv-filter-button--unchecked\": !visibleStatuses.includes(\n                      item.status,\n                    ),\n                  },\n                )}\n                onClick={() => toggleStatus(item.status)}\n              >\n                <div className=\"jenkins-dropdown__item__icon\">\n                  <StatusIcon\n                    status={item.status}\n                    skeleton={!visibleStatuses.includes(item.status)}\n                    percentage={0}\n                  />\n                </div>\n                {item.text}\n              </button>\n            ))}\n          </div>\n        }\n      >\n        <button\n          className={classNames(\n            \"jenkins-button\",\n            {\n              \"jenkins-button--tertiary\": allVisible,\n            },\n            {\n              \"jenkins-!-accent-color\": !allVisible,\n            },\n          )}\n          type=\"button\"\n          disabled={disabled}\n          onClick={visible ? hide : show}\n          aria-label={\"Filter\"}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={!allVisible ? 42 : 36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n        </button>\n      </Tippy>\n    </Tooltip>\n  );\n}\n\ninterface FilterProps {\n  disabled?: boolean;\n}\n","import \"./data-tree-view.scss\";\n\nimport {\n  memo,\n  MouseEvent as ReactMouseEvent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\n\nimport Filter from \"../../../common/components/filter.tsx\";\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport LiveTotal from \"../../../common/utils/live-total.tsx\";\nimport {\n  Result,\n  StageInfo,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { useFilter } from \"./providers/filter-provider.tsx\";\n\nexport default function DataTreeView({\n  stages,\n  selected,\n  onNodeSelect,\n}: DataTreeViewProps) {\n  const { search, setSearch, visibleStatuses } = useFilter();\n  const filteredStages = filterStageTree(search, visibleStatuses, stages);\n\n  const handleSelect = useCallback(\n    (event: ReactMouseEvent, nodeId: string) => {\n      onNodeSelect(event, nodeId);\n    },\n    [onNodeSelect],\n  );\n\n  if (stages.length === 1 && stages[0].placeholder) {\n    return null;\n  }\n\n  return (\n    <div>\n      <div className={\"pgw-filter-bar\"}>\n        <div className=\"jenkins-search\">\n          <div className=\"jenkins-search__icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M221.09 64a157.09 157.09 0 10157.09 157.09A157.1 157.1 0 00221.09 64z\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n              />\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n                d=\"M338.29 338.29L448 448\"\n              />\n            </svg>\n          </div>\n          <input\n            className=\"jenkins-input jenkins-search__input\"\n            placeholder=\"Search\"\n            type=\"search\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"off\"\n            spellCheck=\"false\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </div>\n        <Filter />\n      </div>\n\n      {filteredStages.length === 0 && (\n        <div className={\"jenkins-notice\"}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n          <div>No stages</div>\n        </div>\n      )}\n\n      <ol className={\"pgv-tree\"} role=\"tree\" aria-label={\"Pipeline Stages\"}>\n        {filteredStages.map((stage) => (\n          <TreeNode\n            key={stage.id}\n            stage={stage}\n            selected={String(selected)}\n            onSelect={handleSelect}\n          />\n        ))}\n      </ol>\n    </div>\n  );\n}\n\nfunction hasSelectedDescendant(stage: StageInfo, selected: string): boolean {\n  return stage.children?.some(\n    (child) =>\n      String(child.id) === selected || hasSelectedDescendant(child, selected),\n  );\n}\n\nconst TreeNode = memo(function TreeNode({\n  stage,\n  selected,\n  onSelect,\n}: TreeNodeProps) {\n  const { search, visibleStatuses, allVisible } = useFilter();\n  const hasChildren = stage.children && stage.children.length > 0;\n  const isSelected = String(stage.id) === selected;\n  const [isExpanded, setIsExpanded] = useState<boolean>(\n    hasSelectedDescendant(stage, selected),\n  );\n\n  const handleToggleClick = (e: ReactMouseEvent) => {\n    e.stopPropagation();\n    setIsExpanded(!isExpanded);\n  };\n\n  useEffect(() => {\n    if (hasSelectedDescendant(stage, selected)) {\n      setIsExpanded(true);\n    }\n  }, [stage, selected]);\n\n  useEffect(() => {\n    if (search.length || !allVisible) {\n      if (filterStageTree(search, visibleStatuses, [stage]).length !== 0) {\n        setIsExpanded(true);\n      }\n    }\n  }, [search, visibleStatuses, allVisible, stage]);\n\n  return (\n    <li\n      className=\"pgv-tree-stage\"\n      role={\"treeitem\"}\n      {...(hasChildren ? { \"aria-expanded\": isExpanded } : {})}\n      aria-selected={isSelected}\n      aria-labelledby={`stage-${stage.id}-name`}\n    >\n      <div className=\"pgv-tree-item-container\">\n        <a\n          href={`?selected-node=` + stage.id}\n          onClick={(e) => {\n            // Only prevent left clicks\n            if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n              return;\n            }\n\n            e.preventDefault();\n\n            history.replaceState({}, \"\", `?selected-node=` + stage.id);\n            if (!isSelected) {\n              onSelect(e, String(stage.id));\n            }\n            setIsExpanded(!isExpanded);\n          }}\n          className={classNames(\"pgv-tree-item\", {\n            \"pgv-tree-item--active\": isSelected,\n            \"pgv-tree-item--skeleton\": stage.skeleton,\n          })}\n          aria-labelledby={`stage-${stage.id}-name`}\n        >\n          <div className={\"pgv-tree-item__content\"}>\n            <div className=\"pgv-status-icon\">\n              <StatusIcon\n                status={stage.state}\n                percentage={stage.completePercent}\n                skeleton={stage.skeleton}\n              />\n            </div>\n            <div className={\"pgv-tree-item__info\"}>\n              <div\n                className=\"pgv-tree-item__name\"\n                id={`stage-${stage.id}-name`}\n              >\n                <span className={\"jenkins-visually-hidden\"}>Stage </span>\n                {stage.name}\n              </div>\n              <div className=\"pgv-tree-item__description\">\n                <LiveTotal\n                  start={stage.startTimeMillis}\n                  total={stage.totalDurationMillis}\n                />\n              </div>\n            </div>\n          </div>\n        </a>\n        {hasChildren && (\n          <button\n            className={classNames(\"pgv-tree-item__toggle\", {\n              \"pgv-tree-item__toggle--active\": isExpanded,\n            })}\n            onClick={handleToggleClick}\n            aria-label={`${isExpanded ? \"Collapse\" : \"Expand\"} ${stage.name}`}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </button>\n        )}\n      </div>\n\n      {hasChildren && isExpanded && (\n        <div className=\"pgv-tree-children\">\n          <ol\n            role={\"group\"}\n            aria-label={`Stages in ${stage.name}`}\n            className={\"pgv-tree\"}\n          >\n            {stage.children.map((child) => (\n              <TreeNode\n                key={child.id}\n                stage={child}\n                selected={selected}\n                onSelect={onSelect}\n              />\n            ))}\n          </ol>\n        </div>\n      )}\n    </li>\n  );\n});\n\nconst filterStageTree = (\n  search: string,\n  visibleStatuses: Result[],\n  stages: StageInfo[],\n): StageInfo[] => {\n  return stages\n    .map((stage) => {\n      const filteredChildren = stage.children\n        ? filterStageTree(search, visibleStatuses, stage.children)\n        : [];\n\n      const matchesSelf =\n        stage.name.toLowerCase().includes(search.toLowerCase()) &&\n        visibleStatuses.includes(stage.state);\n\n      // Include this stage if it matches or has matching children\n      if (matchesSelf || filteredChildren.length > 0) {\n        return {\n          ...stage,\n          children: filteredChildren,\n        };\n      }\n\n      return null;\n    })\n    .filter((stage) => stage !== null);\n};\n\ninterface DataTreeViewProps {\n  stages: StageInfo[];\n  selected?: number;\n  onNodeSelect: (event: ReactMouseEvent, nodeId: string) => void;\n}\n\ninterface TreeNodeProps {\n  stage: StageInfo;\n  selected: string;\n  onSelect: (event: ReactMouseEvent, id: string) => void;\n}\n","// re-export Result so the relative path exists in one location.\nexport * from \"../../../common/RestClient.tsx\";\nexport type {\n  StageInfo,\n  StageType,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nexport { Result } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\nexport const LOG_FETCH_SIZE = 150 * 1024;\nexport const POLL_INTERVAL = 1000;\nexport const TAIL_CONSOLE_LOG = -LOG_FETCH_SIZE;\n","import { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport useRunPoller from \"../../../../common/tree-api.ts\";\nimport {\n  getConsoleTextOffset,\n  getExceptionText,\n  getRunSteps,\n  POLL_INTERVAL,\n  Result,\n  StageInfo,\n  StepInfo,\n  StepLogBufferInfo,\n  TAIL_CONSOLE_LOG,\n} from \"../PipelineConsoleModel.tsx\";\n\nasync function updateStepBuffer(\n  stepBuffer: StepLogBufferInfo,\n  stepId: string,\n  forceUpdate: boolean,\n  startByte: number,\n): Promise<void> {\n  const isTailing = startByte === TAIL_CONSOLE_LOG;\n  if (stepBuffer.startByte > 0 && !forceUpdate) {\n    // This is a large log. Only update the log when requested by the UI.\n    return;\n  }\n  if (isTailing && stepBuffer.stopTailing) {\n    // We've already reached the end of the log.\n    return;\n  }\n  if (\n    !isTailing &&\n    stepBuffer.startByte <= startByte &&\n    startByte <= stepBuffer.endByte\n  ) {\n    // Duplicate click on \"There's more to see - XMiB of logs hidden\".\n    return;\n  }\n  let consoleAnnotator = \"\";\n  if (isTailing) {\n    startByte = stepBuffer.endByte;\n    consoleAnnotator = stepBuffer.consoleAnnotator || \"\";\n    if (stepBuffer.lastFetched) {\n      // Slow down incremental fetch to POLL_INTERVAL.\n      const msSinceLastFetch = performance.now() - stepBuffer.lastFetched;\n      const backOff = POLL_INTERVAL - msSinceLastFetch;\n      await new Promise((resolve) => setTimeout(resolve, backOff));\n    }\n  }\n  stepBuffer.lastFetched = performance.now();\n  const response = await getConsoleTextOffset(\n    stepId,\n    startByte,\n    consoleAnnotator,\n  );\n  if (!response) {\n    // Request failed.\n    return;\n  }\n\n  const newLogLines = response.text.split(\"\\n\");\n  if (newLogLines[newLogLines.length - 1] === \"\") {\n    // Remove trailing empty new line caused by a) splitting an empty string or b) a trailing new line character in the response.\n    newLogLines.pop();\n  }\n\n  const exceptionText = stepBuffer.exceptionText || [];\n  if (stepBuffer.endByte > 0 && stepBuffer.endByte === startByte) {\n    stepBuffer.lines.length -= exceptionText.length;\n    stepBuffer.lines = [...stepBuffer.lines, ...newLogLines, ...exceptionText];\n  } else {\n    stepBuffer.lines = newLogLines.concat(exceptionText);\n    stepBuffer.startByte = response.startByte;\n  }\n\n  stepBuffer.endByte = response.endByte;\n  stepBuffer.consoleAnnotator = response.consoleAnnotator;\n  if (!response.nodeIsActive) {\n    // We've reached the end of the log now.\n    stepBuffer.stopTailing = true;\n  }\n}\n\nexport function useStepsPoller(props: RunPollerProps) {\n  const { run, loading } = useRunPoller({\n    currentRunPath: props.currentRunPath,\n    previousRunPath: props.previousRunPath,\n  });\n\n  const [openStage, setOpenStage] = useState(\"\");\n  const [expandedSteps, setExpandedSteps] = useState<string[]>([]);\n  const collapsedSteps = useRef(new Set<string>());\n  const [steps, setSteps] = useState<StepInfo[]>([]);\n  const [stepBuffers, setStepBuffers] = useState(\n    new Map<string, StepLogBufferInfo>(),\n  );\n  // Avoid invalidating updateStepConsoleOffset on every stepBuffer change.\n  const stepBuffersRef = useRef(stepBuffers);\n  const updateStepConsoleOffset = useCallback(\n    async (stepId: string, forceUpdate: boolean, startByte: number) => {\n      const stepBuffers = stepBuffersRef.current;\n      let stepBuffer = stepBuffers.get(stepId);\n      if (!stepBuffer) {\n        stepBuffer = { lines: [], startByte: 0, endByte: TAIL_CONSOLE_LOG };\n        stepBuffers.set(stepId, stepBuffer);\n      }\n\n      // Cheap FIFO queue to avoid duplicate fetches.\n      const promise = (stepBuffer.pending || Promise.resolve()).finally(() =>\n        updateStepBuffer(stepBuffer, stepId, forceUpdate, startByte),\n      );\n      stepBuffer.pending = promise;\n      try {\n        await promise;\n      } finally {\n        if (stepBuffer.pending === promise) {\n          delete stepBuffer.pending;\n        }\n      }\n\n      stepBuffersRef.current = new Map(stepBuffers).set(stepId, stepBuffer);\n      setStepBuffers(stepBuffersRef.current);\n    },\n    [],\n  );\n\n  const fetchExceptionText = useCallback(async (stepId: string) => {\n    const stepBuffers = stepBuffersRef.current;\n    let stepBuffer = stepBuffers.get(stepId);\n    if (!stepBuffer) {\n      stepBuffer = { lines: [], startByte: 0, endByte: TAIL_CONSOLE_LOG };\n      stepBuffers.set(stepId, stepBuffer);\n    }\n    while (stepBuffer.pendingExceptionText) {\n      await stepBuffer.pendingExceptionText;\n    }\n    if (stepBuffer.exceptionText?.length) return; // Already fetched\n    const promise = getExceptionText(stepId);\n    stepBuffer.pendingExceptionText = promise;\n    try {\n      stepBuffer.exceptionText = await promise;\n    } finally {\n      delete stepBuffer.pendingExceptionText;\n    }\n\n    stepBuffer.lines = stepBuffer.lines.concat(stepBuffer.exceptionText);\n\n    stepBuffersRef.current = new Map(stepBuffers).set(stepId, stepBuffer);\n    setStepBuffers(stepBuffersRef.current);\n  }, []);\n\n  const parseUrlParams = useCallback(\n    (steps: StepInfo[]): boolean => {\n      const params = new URLSearchParams(document.location.search.substring(1));\n      let selected = params.get(\"selected-node\");\n      if (!selected) {\n        return false;\n      }\n      if (collapsedSteps.current.has(selected)) return true;\n\n      const step = steps.find((s) => s.id === selected);\n      if (step) {\n        selected = step.stageId;\n        setExpandedSteps((prev) => {\n          if (prev.includes(step.id)) return prev;\n          return [...prev, step.id];\n        });\n\n        updateStepConsoleOffset(\n          step.id,\n          false,\n          parseInt(params.get(\"start-byte\") || `${TAIL_CONSOLE_LOG}`),\n        );\n      }\n\n      setOpenStage(selected);\n      return true;\n    },\n    [updateStepConsoleOffset],\n  );\n\n  const getDefaultSelectedStep = useCallback(\n    (steps: StepInfo[]) => {\n      let selectedStep = steps.find((step) => step !== undefined);\n      if (!steps || steps.length === 0 || !selectedStep) {\n        return null;\n      }\n      for (const step of steps) {\n        const stepResult = step.state.toLowerCase() as Result;\n        const selectedStepResult = selectedStep?.state.toLowerCase() as Result;\n        switch (stepResult) {\n          case Result.running:\n          case Result.queued:\n          case Result.paused:\n            // Return first running/queued/paused step.\n            return step;\n          case Result.unstable:\n          case Result.failure:\n          case Result.aborted:\n            if (\n              run?.complete &&\n              selectedStepResult &&\n              stepResult < selectedStepResult\n            ) {\n              // If the run is complete return first unstable/failed/aborted step which has a state worse\n              // than the selectedStep.\n              // E.g. if the first step state is failure we want to return that over a later unstable step.\n              return step;\n            }\n            continue;\n          default:\n            // Otherwise select the step with the worst result with the largest id - e.g. (last step if all successful).\n            if (selectedStepResult && stepResult <= selectedStepResult) {\n              selectedStep = step;\n            }\n        }\n      }\n      return selectedStep;\n    },\n    [run?.complete],\n  );\n\n  useEffect(() => {\n    let previousStepsSerialized = \"\";\n    function updateStepsIfChanged(steps: StepInfo[]) {\n      const nextStepsSerialized = JSON.stringify(steps);\n      if (previousStepsSerialized === nextStepsSerialized) return; // no change\n      previousStepsSerialized = nextStepsSerialized;\n\n      setSteps(steps);\n\n      const usedUrl = parseUrlParams(steps);\n      if (!usedUrl) {\n        const defaultStep = getDefaultSelectedStep(steps);\n        if (defaultStep) {\n          setOpenStage(defaultStep.stageId);\n\n          if (defaultStep.stageId) {\n            setExpandedSteps((prev) => [...prev, defaultStep.id]);\n            updateStepConsoleOffset(defaultStep.id, false, TAIL_CONSOLE_LOG);\n          }\n        }\n      }\n    }\n\n    let polling = true;\n    const poll = async () => {\n      while (polling) {\n        const data = await getRunSteps();\n        if (data?.steps) updateStepsIfChanged(data.steps);\n        if (data?.runIsComplete) polling = false;\n        if (!polling) break;\n        await new Promise((resolve) => setTimeout(resolve, POLL_INTERVAL));\n      }\n    };\n    poll();\n    return () => {\n      polling = false;\n    };\n  }, [getDefaultSelectedStep, parseUrlParams, updateStepConsoleOffset]);\n\n  const handleStageSelect = useCallback(\n    (nodeId: string) => {\n      if (!nodeId) return;\n      if (nodeId === openStage) return; // skip if already selected\n\n      const stepsForStage = steps.filter((step) => step.stageId === nodeId);\n      const lastStep = stepsForStage[stepsForStage.length - 1];\n\n      history.replaceState({}, \"\", `?selected-node=` + nodeId);\n\n      setOpenStage(nodeId);\n      if (lastStep && !collapsedSteps.current.has(lastStep.id)) {\n        setExpandedSteps((prev) => [...prev, lastStep.id]);\n        updateStepConsoleOffset(lastStep.id, false, TAIL_CONSOLE_LOG);\n      }\n    },\n    [openStage, steps, updateStepConsoleOffset],\n  );\n\n  const onStepToggle = (nodeId: string) => {\n    if (!expandedSteps.includes(nodeId)) {\n      collapsedSteps.current.delete(nodeId);\n      setExpandedSteps((prev) => [...prev, nodeId]);\n      updateStepConsoleOffset(nodeId, false, TAIL_CONSOLE_LOG);\n    } else {\n      collapsedSteps.current.add(nodeId);\n      setExpandedSteps((prev) => prev.filter((id) => id !== nodeId));\n    }\n  };\n\n  const onMoreConsoleClick = useCallback(\n    (nodeId: string, startByte: number) => {\n      updateStepConsoleOffset(nodeId, true, startByte);\n    },\n    [updateStepConsoleOffset],\n  );\n\n  const getStageSteps = (stageId: string) => {\n    return steps.filter((step) => step.stageId === stageId);\n  };\n\n  const getStageStepBuffers = (stageId: string) => {\n    const buffers = new Map<string, StepLogBufferInfo>();\n    steps.forEach((step) => {\n      if (step.stageId === stageId && stepBuffers.has(step.id)) {\n        buffers.set(step.id, stepBuffers.get(step.id)!);\n      }\n    });\n    return buffers;\n  };\n\n  const getOpenStage = (): StageInfo | null => {\n    const findStage = (stages: StageInfo[]): StageInfo | null => {\n      for (const stage of stages) {\n        if (String(stage.id) === openStage) return stage;\n        if (stage.children.length > 0) {\n          const result = findStage(stage.children);\n          if (result) return result;\n        }\n      }\n      return null;\n    };\n    return openStage ? findStage(run?.stages || []) : null;\n  };\n\n  return {\n    openStage: getOpenStage(),\n    openStageSteps: getStageSteps(openStage),\n    openStageStepBuffers: getStageStepBuffers(openStage),\n    expandedSteps,\n    stages: run?.stages || [],\n    handleStageSelect,\n    onStepToggle,\n    onMoreConsoleClick,\n    fetchExceptionText,\n    loading,\n  };\n}\n\ninterface RunPollerProps {\n  currentRunPath: string;\n  previousRunPath?: string;\n}\n","import { lazy, useEffect, useState } from \"react\";\n\nimport {\n  getConsoleBuildOutput,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"../../../common/RestClient.tsx\";\nimport { Result } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\nconst ConsoleLogStream = lazy(() => import(\"./ConsoleLogStream.tsx\"));\n\nasync function fetchData(): Promise<StepLogBufferInfo> {\n  const consoleBuildOutput = await getConsoleBuildOutput();\n\n  return {\n    lines: consoleBuildOutput?.split(\"\\n\") ?? [],\n    startByte: 0,\n    endByte: 0,\n  };\n}\n\nexport function NoStageStepsFallback() {\n  const step: StepInfo = {\n    id: \"step-1\",\n    name: \"Step 1\",\n    title: \"Step 1 Title\",\n    state: Result.success,\n    completePercent: 100,\n    type: \"STEP\",\n    startTimeMillis: 0,\n    totalDurationMillis: 0,\n    stageId: \"\",\n    pauseDurationMillis: 0,\n  };\n\n  const [logBuffer, setLogBuffer] = useState<StepLogBufferInfo>();\n\n  useEffect(() => {\n    fetchData()\n      .then((data) => {\n        setLogBuffer(data);\n        return data;\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n    <div className={\"pgv-stage-steps\"}>\n      <div className={\"pgv-step-detail-group\"}>\n        <ConsoleLogStream\n          logBuffer={logBuffer ?? { lines: [], startByte: 0, endByte: 0 }}\n          onMoreConsoleClick={() => {}}\n          step={step}\n          fetchExceptionText={() => {}}\n        />\n      </div>\n    </div>\n  );\n}\n","import \"./scroll-to-top-bottom.scss\";\n\nimport { useEffect, useState } from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\n\nexport default function ScrollToTopBottom() {\n  const [isAtTop, setIsAtTop] = useState(true);\n  const [isAtBottom, setIsAtBottom] = useState(false);\n  const [isScrollable, setIsScrollable] = useState(false);\n\n  useEffect(() => {\n    const updateScrollState = () => {\n      const scrollTop =\n        window.pageYOffset || document.documentElement.scrollTop;\n      const windowHeight = window.innerHeight;\n      const docHeight = document.documentElement.scrollHeight;\n\n      const atTop = scrollTop <= 10;\n      const atBottom = scrollTop + windowHeight >= docHeight - 10;\n      const scrollable = docHeight > windowHeight + 10;\n\n      setIsAtTop(atTop);\n      setIsAtBottom(atBottom);\n      setIsScrollable(scrollable);\n    };\n\n    updateScrollState();\n\n    window.addEventListener(\"scroll\", updateScrollState);\n    window.addEventListener(\"resize\", updateScrollState);\n\n    const observer = new MutationObserver(updateScrollState);\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      characterData: true,\n    });\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateScrollState);\n      window.removeEventListener(\"resize\", updateScrollState);\n      observer.disconnect();\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n    });\n  };\n\n  const scrollToBottom = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n    });\n  };\n\n  return (\n    <div\n      className={classNames(`pgv-scroll-to-top-bottom`, {\n        \"pgv-scroll-to-top-bottom--visible\": isScrollable,\n      })}\n      aria-hidden={!isScrollable}\n    >\n      <button\n        onClick={scrollToTop}\n        className=\"jenkins-button\"\n        disabled={isAtTop}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 244l144-144 144 144M256 120v292\"\n          />\n        </svg>\n      </button>\n      <button\n        onClick={scrollToBottom}\n        className=\"jenkins-button\"\n        disabled={isAtBottom}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 268l144 144 144-144M256 392V100\"\n          />\n        </svg>\n      </button>\n    </div>\n  );\n}\n","import \"./split-view.scss\";\n\nimport {\n  Children,\n  MouseEvent as ReactMouseEvent,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { useLayoutPreferences } from \"./providers/user-preference-provider.tsx\";\n\nexport default function SplitView(props: SplitViewNewProps) {\n  const {\n    setTreeViewWidth,\n    setStageViewWidth,\n    setStageViewHeight,\n    treeViewWidth,\n    stageViewWidth,\n    stageViewHeight,\n  } = useLayoutPreferences();\n\n  const { direction = \"horizontal\", storageKey } = props;\n  const [isDragging, setIsDragging] = useState(false);\n\n  const isVertical = direction === \"vertical\";\n\n  const initialSize = (() => {\n    if (storageKey === \"stages\") return treeViewWidth;\n    if (storageKey === \"graph\") {\n      return isVertical ? stageViewHeight : stageViewWidth;\n    }\n    return 300; // fallback\n  })();\n\n  useEffect(() => {\n    const newSize = (() => {\n      if (storageKey === \"stages\") return treeViewWidth;\n      if (storageKey === \"graph\") {\n        return direction === \"vertical\" ? stageViewHeight : stageViewWidth;\n      }\n      return 300;\n    })();\n\n    setPanelSize(newSize);\n  }, [direction, treeViewWidth, stageViewWidth, stageViewHeight, storageKey]);\n\n  const [panelSize, setPanelSize] = useState<number>(initialSize);\n\n  const dividerRef = useRef<HTMLDivElement>(null);\n\n  const startDragging = (e: ReactMouseEvent) => {\n    setIsDragging(true);\n    e.preventDefault();\n  };\n\n  const stopDragging = () => setIsDragging(false);\n\n  const handleDragging = (e: MouseEvent) => {\n    if (!isDragging) return;\n\n    // Dynamically follow mouse based on direction\n    const newSize =\n      direction === \"vertical\"\n        ? e.clientY - getContainerOffset()\n        : e.clientX - getContainerOffset();\n\n    const clampedSize = Math.max(\n      direction === \"vertical\" ? 100 : 200,\n      Math.min(newSize, 1500),\n    );\n    setPanelSize(clampedSize);\n\n    // Update context sizes\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(clampedSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(clampedSize);\n      } else {\n        setStageViewWidth(clampedSize);\n      }\n    }\n  };\n\n  const handleDoubleClick = () => {\n    const resetSize = (() => {\n      if (storageKey === \"stages\") return 300;\n      if (storageKey === \"graph\") return isVertical ? 250 : 600;\n      return 300;\n    })();\n\n    setPanelSize(resetSize);\n\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(resetSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(resetSize);\n      } else {\n        setStageViewWidth(resetSize);\n      }\n    }\n  };\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getContainerOffset = () => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      return direction === \"vertical\" ? rect.top : rect.left;\n    }\n    return 0;\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleDragging);\n    window.addEventListener(\"mouseup\", stopDragging);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleDragging);\n      window.removeEventListener(\"mouseup\", stopDragging);\n    };\n  });\n\n  // If we only have one child, just return it\n  const childrenArray = Children.toArray(props.children).filter(Boolean);\n  if (childrenArray.length === 1) {\n    return <>{childrenArray[0]}</>;\n  }\n\n  const gridTemplate =\n    direction === \"vertical\" ? `${panelSize}px 1fr` : `${panelSize}px 1fr`;\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"pgv-split-view__container\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns:\n          direction === \"vertical\" ? undefined : gridTemplate,\n        gridTemplateRows: direction === \"vertical\" ? gridTemplate : undefined,\n      }}\n    >\n      <div\n        className={classNames(\"pgv-split-view__side-panel\", {\n          \"pgv-split-view__side-panel--vertical\": direction === \"vertical\",\n        })}\n      >\n        {childrenArray[0]}\n        <div\n          ref={dividerRef}\n          onMouseDown={startDragging}\n          onDoubleClick={handleDoubleClick}\n          className={`pgv-split-view__divider ${\n            direction === \"vertical\" ? \"pgv-split-view__divider--vertical\" : \"\"\n          }`}\n        />\n      </div>\n      <div>{childrenArray[1]}</div>\n    </div>\n  );\n}\n\ninterface SplitViewNewProps {\n  children: ReactNode[];\n  direction?: \"horizontal\" | \"vertical\";\n  storageKey: \"stages\" | \"graph\";\n}\n","export default function StageNodeLink({ agent }: StageNodeLinkProps) {\n  if (!agent) {\n    return null;\n  }\n\n  const agentName = agent === \"built-in\" ? \"Jenkins\" : agent;\n  const href = getAgentUrl(agent);\n\n  function getAgentUrl(name: string) {\n    // Wrap built-in in brackets\n    const id = name === \"built-in\" ? \"(built-in)\" : name;\n    const rootPath = document.head.dataset.rooturl;\n    return `${rootPath}/computer/${id}/`;\n  }\n\n  return (\n    <li className={\"jenkins-mobile-hide\"}>\n      <a\n        href={href}\n        className={\"jenkins-button jenkins-button--tertiary\"}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <svg\n          width=\"512px\"\n          height=\"512px\"\n          viewBox=\"0 0 512 512\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g\n            stroke=\"none\"\n            strokeWidth=\"1\"\n            fill=\"none\"\n            fillRule=\"evenodd\"\n            strokeLinejoin=\"round\"\n          >\n            <g\n              transform=\"translate(32.000000, 64.000000)\"\n              stroke=\"currentColor\"\n              strokeWidth=\"32\"\n            >\n              <rect x=\"0\" y=\"0\" width=\"448\" height=\"320\" rx=\"32\" />\n              <polygon\n                strokeLinecap=\"round\"\n                fillRule=\"nonzero\"\n                points=\"272 384 264 320 184 320 176 384\"\n              />\n              <line x1=\"336\" y1=\"384\" x2=\"112\" y2=\"384\" strokeLinecap=\"round\" />\n            </g>\n          </g>\n        </svg>\n        {agentName}\n      </a>\n    </li>\n  );\n}\n\ninterface StageNodeLinkProps {\n  agent?: string;\n}\n","import \"./stage-details.scss\";\n\nimport Dropdown from \"../../../common/components/dropdown.tsx\";\nimport StatusIcon, {\n  resultToColor,\n} from \"../../../common/components/status-icon.tsx\";\nimport { DOCUMENT } from \"../../../common/components/symbols.tsx\";\nimport Tooltip from \"../../../common/components/tooltip.tsx\";\nimport LiveTotal from \"../../../common/utils/live-total.tsx\";\nimport { exact, Paused, Started } from \"../../../common/utils/timings.tsx\";\nimport { StageInfo } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport StageNodeLink from \"./StageNodeLink.tsx\";\n\nexport default function StageDetails({ stage }: StageDetailsProps) {\n  if (!stage) {\n    return null;\n  }\n\n  return (\n    <div\n      className={\n        \"pgv-stage-details \" + resultToColor(stage.state, stage.skeleton)\n      }\n    >\n      {stage.state === \"running\" && (\n        <div className={\"pgv-stage-details__running\"} />\n      )}\n      <div>\n        <StatusIcon\n          status={stage.state}\n          skeleton={stage.skeleton}\n          percentage={stage.completePercent}\n        />\n        <h2>{stage.name}</h2>\n      </div>\n      <ul>\n        <li>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 512 512\"\n            aria-label={\"Total duration\"}\n          >\n            <path\n              d=\"M112.91 128A191.85 191.85 0 0064 254c-1.18 106.35 85.65 193.8 192 194 106.2.2 192-85.83 192-192 0-104.54-83.55-189.61-187.5-192a4.36 4.36 0 00-4.5 4.37V152\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              d=\"M233.38 278.63l-79-113a8.13 8.13 0 0111.32-11.32l113 79a32.5 32.5 0 01-37.25 53.26 33.21 33.21 0 01-8.07-7.94z\"\n              fill=\"currentColor\"\n            />\n          </svg>\n          <LiveTotal\n            total={stage.totalDurationMillis}\n            start={stage.startTimeMillis}\n          />\n        </li>\n        <li>\n          <Tooltip content={exact(stage.startTimeMillis)}>\n            <span>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                <path\n                  d=\"M256 64C150 64 64 150 64 256s86 192 192 192 192-86 192-192S362 64 256 64z\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeMiterlimit=\"10\"\n                  strokeWidth=\"32\"\n                />\n                <path\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"32\"\n                  d=\"M256 128v144h96\"\n                />\n              </svg>\n              <Started since={stage.startTimeMillis} />\n            </span>\n          </Tooltip>\n        </li>\n        {stage.pauseDurationMillis !== 0 && (\n          <li className={\"jenkins-mobile-hide\"}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M145.61 464h220.78c19.8 0 35.55-16.29 33.42-35.06C386.06 308 304 310 304 256s83.11-51 95.8-172.94c2-18.78-13.61-35.06-33.41-35.06H145.61c-19.8 0-35.37 16.28-33.41 35.06C124.89 205 208 201 208 256s-82.06 52-95.8 172.94c-2.14 18.77 13.61 35.06 33.41 35.06z\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"32\"\n              />\n              <path\n                d=\"M343.3 432H169.13c-15.6 0-20-18-9.06-29.16C186.55 376 240 356.78 240 326V224c0-19.85-38-35-61.51-67.2-3.88-5.31-3.49-12.8 6.37-12.8h142.73c8.41 0 10.23 7.43 6.4 12.75C310.82 189 272 204.05 272 224v102c0 30.53 55.71 47 80.4 76.87 9.95 12.04 6.47 29.13-9.1 29.13z\"\n                fill=\"currentColor\"\n              />\n            </svg>\n            <Paused since={stage.pauseDurationMillis} />\n          </li>\n        )}\n        <StageNodeLink agent={stage.agent} />\n        <li>\n          <Dropdown\n            className={\"jenkins-button--tertiary\"}\n            disabled={stage.synthetic && !stage.placeholder}\n            items={[\n              {\n                text: \"View stage as plain text\",\n                icon: DOCUMENT,\n                href: `log?nodeId=${stage.id}`,\n                target: \"_blank\",\n              },\n              {\n                text: \"Download stage logs\",\n                icon: (\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                    <path\n                      d=\"M336 176h40a40 40 0 0140 40v208a40 40 0 01-40 40H136a40 40 0 01-40-40V216a40 40 0 0140-40h40\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"32\"\n                    />\n                    <path\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"32\"\n                      d=\"M176 272l80 80 80-80M256 48v288\"\n                    />\n                  </svg>\n                ),\n                href: `log?nodeId=${stage.id}`,\n                download: `${stage.name}.txt`,\n              },\n            ]}\n          />\n        </li>\n      </ul>\n    </div>\n  );\n}\n\ninterface StageDetailsProps {\n  stage: StageInfo | null;\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED DO NOT EDIT DIRECTLY\n// See update-tlds.js for encoding/decoding format\n// https://data.iana.org/TLD/tlds-alpha-by-domain.txt\nconst encodedTlds = 'aaa1rp3bb0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4w0s2x0a2z0ure5ba0by2idu3namex4d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re3c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y3k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking4l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dad1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t1u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d1tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0els3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6properties14fh2g1h1i0a1ds2m1ndle4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3nd0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4k2ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic4v1w1x1y1z2na0b1goya4me2vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rton4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0axi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp3ell3ia1ksha5oes2p0ping5uji3w3i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lvo3te1ing3o2yage5u2wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2';\n// Internationalized domain names containing non-ASCII\nconst encodedUtlds = 'ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2';\n\n/**\n * Finite State Machine generation utilities\n */\n\n/**\n * @template T\n * @typedef {{ [group: string]: T[] }} Collections\n */\n\n/**\n * @typedef {{ [group: string]: true }} Flags\n */\n\n// Keys in scanner Collections instances\nconst numeric = 'numeric';\nconst ascii = 'ascii';\nconst alpha = 'alpha';\nconst asciinumeric = 'asciinumeric';\nconst alphanumeric = 'alphanumeric';\nconst domain = 'domain';\nconst emoji = 'emoji';\nconst scheme = 'scheme';\nconst slashscheme = 'slashscheme';\nconst whitespace = 'whitespace';\n\n/**\n * @template T\n * @param {string} name\n * @param {Collections<T>} groups to register in\n * @returns {T[]} Current list of tokens in the given collection\n */\nfunction registerGroup(name, groups) {\n  if (!(name in groups)) {\n    groups[name] = [];\n  }\n  return groups[name];\n}\n\n/**\n * @template T\n * @param {T} t token to add\n * @param {Collections<T>} groups\n * @param {Flags} flags\n */\nfunction addToGroups(t, flags, groups) {\n  if (flags[numeric]) {\n    flags[asciinumeric] = true;\n    flags[alphanumeric] = true;\n  }\n  if (flags[ascii]) {\n    flags[asciinumeric] = true;\n    flags[alpha] = true;\n  }\n  if (flags[asciinumeric]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alpha]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alphanumeric]) {\n    flags[domain] = true;\n  }\n  if (flags[emoji]) {\n    flags[domain] = true;\n  }\n  for (const k in flags) {\n    const group = registerGroup(k, groups);\n    if (group.indexOf(t) < 0) {\n      group.push(t);\n    }\n  }\n}\n\n/**\n * @template T\n * @param {T} t token to check\n * @param {Collections<T>} groups\n * @returns {Flags} group flags that contain this token\n */\nfunction flagsForToken(t, groups) {\n  const result = {};\n  for (const c in groups) {\n    if (groups[c].indexOf(t) >= 0) {\n      result[c] = true;\n    }\n  }\n  return result;\n}\n\n/**\n * @template T\n * @typedef {null | T } Transition\n */\n\n/**\n * Define a basic state machine state. j is the list of character transitions,\n * jr is the list of regex-match transitions, jd is the default state to\n * transition to t is the accepting token type, if any. If this is the terminal\n * state, then it does not emit a token.\n *\n * The template type T represents the type of the token this state accepts. This\n * should be a string (such as of the token exports in `text.js`) or a\n * MultiToken subclass (from `multi.js`)\n *\n * @template T\n * @param {T} [token] Token that this state emits\n */\nfunction State(token = null) {\n  // this.n = null; // DEBUG: State name\n  /** @type {{ [input: string]: State<T> }} j */\n  this.j = {}; // IMPLEMENTATION 1\n  // this.j = []; // IMPLEMENTATION 2\n  /** @type {[RegExp, State<T>][]} jr */\n  this.jr = [];\n  /** @type {?State<T>} jd */\n  this.jd = null;\n  /** @type {?T} t */\n  this.t = token;\n}\n\n/**\n * Scanner token groups\n * @type Collections<string>\n */\nState.groups = {};\nState.prototype = {\n  accepts() {\n    return !!this.t;\n  },\n  /**\n   * Follow an existing transition from the given input to the next state.\n   * Does not mutate.\n   * @param {string} input character or token type to transition on\n   * @returns {?State<T>} the next state, if any\n   */\n  go(input) {\n    const state = this;\n    const nextState = state.j[input];\n    if (nextState) {\n      return nextState;\n    }\n    for (let i = 0; i < state.jr.length; i++) {\n      const regex = state.jr[i][0];\n      const nextState = state.jr[i][1]; // note: might be empty to prevent default jump\n      if (nextState && regex.test(input)) {\n        return nextState;\n      }\n    }\n    // Nowhere left to jump! Return default, if any\n    return state.jd;\n  },\n  /**\n   * Whether the state has a transition for the given input. Set the second\n   * argument to true to only look for an exact match (and not a default or\n   * regular-expression-based transition)\n   * @param {string} input\n   * @param {boolean} exactOnly\n   */\n  has(input, exactOnly = false) {\n    return exactOnly ? input in this.j : !!this.go(input);\n  },\n  /**\n   * Short for \"transition all\"; create a transition from the array of items\n   * in the given list to the same final resulting state.\n   * @param {string | string[]} inputs Group of inputs to transition on\n   * @param {Transition<T> | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   */\n  ta(inputs, next, flags, groups) {\n    for (let i = 0; i < inputs.length; i++) {\n      this.tt(inputs[i], next, flags, groups);\n    }\n  },\n  /**\n   * Short for \"take regexp transition\"; defines a transition for this state\n   * when it encounters a token which matches the given regular expression\n   * @param {RegExp} regexp Regular expression transition (populate first)\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  tr(regexp, next, flags, groups) {\n    groups = groups || State.groups;\n    let nextState;\n    if (next && next.j) {\n      nextState = next;\n    } else {\n      // Token with maybe token groups\n      nextState = new State(next);\n      if (flags && groups) {\n        addToGroups(next, flags, groups);\n      }\n    }\n    this.jr.push([regexp, nextState]);\n    return nextState;\n  },\n  /**\n   * Short for \"take transitions\", will take as many sequential transitions as\n   * the length of the given input and returns the\n   * resulting final state.\n   * @param {string | string[]} input\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  ts(input, next, flags, groups) {\n    let state = this;\n    const len = input.length;\n    if (!len) {\n      return state;\n    }\n    for (let i = 0; i < len - 1; i++) {\n      state = state.tt(input[i]);\n    }\n    return state.tt(input[len - 1], next, flags, groups);\n  },\n  /**\n   * Short for \"take transition\", this is a method for building/working with\n   * state machines.\n   *\n   * If a state already exists for the given input, returns it.\n   *\n   * If a token is specified, that state will emit that token when reached by\n   * the linkify engine.\n   *\n   * If no state exists, it will be initialized with some default transitions\n   * that resemble existing default transitions.\n   *\n   * If a state is given for the second argument, that state will be\n   * transitioned to on the given input regardless of what that input\n   * previously did.\n   *\n   * Specify a token group flags to define groups that this token belongs to.\n   * The token will be added to corresponding entires in the given groups\n   * object.\n   *\n   * @param {string} input character, token type to transition on\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of groups\n   * @returns {State<T>} taken after the given input\n   */\n  tt(input, next, flags, groups) {\n    groups = groups || State.groups;\n    const state = this;\n\n    // Check if existing state given, just a basic transition\n    if (next && next.j) {\n      state.j[input] = next;\n      return next;\n    }\n    const t = next;\n\n    // Take the transition with the usual default mechanisms and use that as\n    // a template for creating the next state\n    let nextState,\n      templateState = state.go(input);\n    if (templateState) {\n      nextState = new State();\n      Object.assign(nextState.j, templateState.j);\n      nextState.jr.push.apply(nextState.jr, templateState.jr);\n      nextState.jd = templateState.jd;\n      nextState.t = templateState.t;\n    } else {\n      nextState = new State();\n    }\n    if (t) {\n      // Ensure newly token is in the same groups as the old token\n      if (groups) {\n        if (nextState.t && typeof nextState.t === 'string') {\n          const allFlags = Object.assign(flagsForToken(nextState.t, groups), flags);\n          addToGroups(t, allFlags, groups);\n        } else if (flags) {\n          addToGroups(t, flags, groups);\n        }\n      }\n      nextState.t = t; // overwrite anything that was previously there\n    }\n    state.j[input] = nextState;\n    return nextState;\n  }\n};\n\n// Helper functions to improve minification (not exported outside linkifyjs module)\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst ta = (state, input, next, flags, groups) => state.ta(input, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {RegExp} regexp\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst tr = (state, regexp, next, flags, groups) => state.tr(regexp, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst ts = (state, input, next, flags, groups) => state.ts(input, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string} input\n * @param {T | State<T>} [next]\n * @param {Collections<T>} [groups]\n * @param {Flags} [flags]\n */\nconst tt = (state, input, next, flags, groups) => state.tt(input, next, flags, groups);\n\n/******************************************************************************\nText Tokens\nIdentifiers for token outputs from the regexp scanner\n******************************************************************************/\n\n// A valid web domain token\nconst WORD = 'WORD'; // only contains a-z\nconst UWORD = 'UWORD'; // contains letters other than a-z, used for IDN\nconst ASCIINUMERICAL = 'ASCIINUMERICAL'; // contains a-z, 0-9\nconst ALPHANUMERICAL = 'ALPHANUMERICAL'; // contains numbers and letters other than a-z, used for IDN\n\n// Special case of word\nconst LOCALHOST = 'LOCALHOST';\n\n// Valid top-level domain, special case of WORD (see tlds.js)\nconst TLD = 'TLD';\n\n// Valid IDN TLD, special case of UWORD (see tlds.js)\nconst UTLD = 'UTLD';\n\n// The scheme portion of a web URI protocol. Supported types include: `mailto`,\n// `file`, and user-defined custom protocols. Limited to schemes that contain\n// only letters\nconst SCHEME = 'SCHEME';\n\n// Similar to SCHEME, except makes distinction for schemes that must always be\n// followed by `://`, not just `:`. Supported types include `http`, `https`,\n// `ftp`, `ftps`\nconst SLASH_SCHEME = 'SLASH_SCHEME';\n\n// Any sequence of digits 0-9\nconst NUM = 'NUM';\n\n// Any number of consecutive whitespace characters that are not newline\nconst WS = 'WS';\n\n// New line (unix style)\nconst NL = 'NL'; // \\n\n\n// Opening/closing bracket classes\n// TODO: Rename OPEN -> LEFT and CLOSE -> RIGHT in v5 to fit with Unicode names\n// Also rename angle brackes to LESSTHAN and GREATER THAN\nconst OPENBRACE = 'OPENBRACE'; // {\nconst CLOSEBRACE = 'CLOSEBRACE'; // }\nconst OPENBRACKET = 'OPENBRACKET'; // [\nconst CLOSEBRACKET = 'CLOSEBRACKET'; // ]\nconst OPENPAREN = 'OPENPAREN'; // (\nconst CLOSEPAREN = 'CLOSEPAREN'; // )\nconst OPENANGLEBRACKET = 'OPENANGLEBRACKET'; // <\nconst CLOSEANGLEBRACKET = 'CLOSEANGLEBRACKET'; // >\nconst FULLWIDTHLEFTPAREN = 'FULLWIDTHLEFTPAREN'; // （\nconst FULLWIDTHRIGHTPAREN = 'FULLWIDTHRIGHTPAREN'; // ）\nconst LEFTCORNERBRACKET = 'LEFTCORNERBRACKET'; // 「\nconst RIGHTCORNERBRACKET = 'RIGHTCORNERBRACKET'; // 」\nconst LEFTWHITECORNERBRACKET = 'LEFTWHITECORNERBRACKET'; // 『\nconst RIGHTWHITECORNERBRACKET = 'RIGHTWHITECORNERBRACKET'; // 』\nconst FULLWIDTHLESSTHAN = 'FULLWIDTHLESSTHAN'; // ＜\nconst FULLWIDTHGREATERTHAN = 'FULLWIDTHGREATERTHAN'; // ＞\n\n// Various symbols\nconst AMPERSAND = 'AMPERSAND'; // &\nconst APOSTROPHE = 'APOSTROPHE'; // '\nconst ASTERISK = 'ASTERISK'; // *\nconst AT = 'AT'; // @\nconst BACKSLASH = 'BACKSLASH'; // \\\nconst BACKTICK = 'BACKTICK'; // `\nconst CARET = 'CARET'; // ^\nconst COLON = 'COLON'; // :\nconst COMMA = 'COMMA'; // ,\nconst DOLLAR = 'DOLLAR'; // $\nconst DOT = 'DOT'; // .\nconst EQUALS = 'EQUALS'; // =\nconst EXCLAMATION = 'EXCLAMATION'; // !\nconst HYPHEN = 'HYPHEN'; // -\nconst PERCENT = 'PERCENT'; // %\nconst PIPE = 'PIPE'; // |\nconst PLUS = 'PLUS'; // +\nconst POUND = 'POUND'; // #\nconst QUERY = 'QUERY'; // ?\nconst QUOTE = 'QUOTE'; // \"\nconst FULLWIDTHMIDDLEDOT = 'FULLWIDTHMIDDLEDOT'; // ・\n\nconst SEMI = 'SEMI'; // ;\nconst SLASH = 'SLASH'; // /\nconst TILDE = 'TILDE'; // ~\nconst UNDERSCORE = 'UNDERSCORE'; // _\n\n// Emoji symbol\nconst EMOJI$1 = 'EMOJI';\n\n// Default token - anything that is not one of the above\nconst SYM = 'SYM';\n\nvar tk = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tALPHANUMERICAL: ALPHANUMERICAL,\n\tAMPERSAND: AMPERSAND,\n\tAPOSTROPHE: APOSTROPHE,\n\tASCIINUMERICAL: ASCIINUMERICAL,\n\tASTERISK: ASTERISK,\n\tAT: AT,\n\tBACKSLASH: BACKSLASH,\n\tBACKTICK: BACKTICK,\n\tCARET: CARET,\n\tCLOSEANGLEBRACKET: CLOSEANGLEBRACKET,\n\tCLOSEBRACE: CLOSEBRACE,\n\tCLOSEBRACKET: CLOSEBRACKET,\n\tCLOSEPAREN: CLOSEPAREN,\n\tCOLON: COLON,\n\tCOMMA: COMMA,\n\tDOLLAR: DOLLAR,\n\tDOT: DOT,\n\tEMOJI: EMOJI$1,\n\tEQUALS: EQUALS,\n\tEXCLAMATION: EXCLAMATION,\n\tFULLWIDTHGREATERTHAN: FULLWIDTHGREATERTHAN,\n\tFULLWIDTHLEFTPAREN: FULLWIDTHLEFTPAREN,\n\tFULLWIDTHLESSTHAN: FULLWIDTHLESSTHAN,\n\tFULLWIDTHMIDDLEDOT: FULLWIDTHMIDDLEDOT,\n\tFULLWIDTHRIGHTPAREN: FULLWIDTHRIGHTPAREN,\n\tHYPHEN: HYPHEN,\n\tLEFTCORNERBRACKET: LEFTCORNERBRACKET,\n\tLEFTWHITECORNERBRACKET: LEFTWHITECORNERBRACKET,\n\tLOCALHOST: LOCALHOST,\n\tNL: NL,\n\tNUM: NUM,\n\tOPENANGLEBRACKET: OPENANGLEBRACKET,\n\tOPENBRACE: OPENBRACE,\n\tOPENBRACKET: OPENBRACKET,\n\tOPENPAREN: OPENPAREN,\n\tPERCENT: PERCENT,\n\tPIPE: PIPE,\n\tPLUS: PLUS,\n\tPOUND: POUND,\n\tQUERY: QUERY,\n\tQUOTE: QUOTE,\n\tRIGHTCORNERBRACKET: RIGHTCORNERBRACKET,\n\tRIGHTWHITECORNERBRACKET: RIGHTWHITECORNERBRACKET,\n\tSCHEME: SCHEME,\n\tSEMI: SEMI,\n\tSLASH: SLASH,\n\tSLASH_SCHEME: SLASH_SCHEME,\n\tSYM: SYM,\n\tTILDE: TILDE,\n\tTLD: TLD,\n\tUNDERSCORE: UNDERSCORE,\n\tUTLD: UTLD,\n\tUWORD: UWORD,\n\tWORD: WORD,\n\tWS: WS\n});\n\n// Note that these two Unicode ones expand into a really big one with Babel\nconst ASCII_LETTER = /[a-z]/;\nconst LETTER = /\\p{L}/u; // Any Unicode character with letter data type\nconst EMOJI = /\\p{Emoji}/u; // Any Unicode emoji character\nconst EMOJI_VARIATION$1 = /\\ufe0f/;\nconst DIGIT = /\\d/;\nconst SPACE = /\\s/;\n\nvar regexp = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tASCII_LETTER: ASCII_LETTER,\n\tDIGIT: DIGIT,\n\tEMOJI: EMOJI,\n\tEMOJI_VARIATION: EMOJI_VARIATION$1,\n\tLETTER: LETTER,\n\tSPACE: SPACE\n});\n\n/**\n\tThe scanner provides an interface that takes a string of text as input, and\n\toutputs an array of tokens instances that can be used for easy URL parsing.\n*/\n\nconst CR = '\\r'; // carriage-return character\nconst LF = '\\n'; // line-feed character\nconst EMOJI_VARIATION = '\\ufe0f'; // Variation selector, follows heart and others\nconst EMOJI_JOINER = '\\u200d'; // zero-width joiner\nconst OBJECT_REPLACEMENT = '\\ufffc'; // whitespace placeholder that sometimes appears in rich text editors\n\nlet tlds = null,\n  utlds = null; // don't change so only have to be computed once\n\n/**\n * Scanner output token:\n * - `t` is the token name (e.g., 'NUM', 'EMOJI', 'TLD')\n * - `v` is the value of the token (e.g., '123', '❤️', 'com')\n * - `s` is the start index of the token in the original string\n * - `e` is the end index of the token in the original string\n * @typedef {{t: string, v: string, s: number, e: number}} Token\n */\n\n/**\n * @template T\n * @typedef {{ [collection: string]: T[] }} Collections\n */\n\n/**\n * Initialize the scanner character-based state machine for the given start\n * state\n * @param {[string, boolean][]} customSchemes List of custom schemes, where each\n * item is a length-2 tuple with the first element set to the string scheme, and\n * the second element set to `true` if the `://` after the scheme is optional\n */\nfunction init$2(customSchemes = []) {\n  // Frequently used states (name argument removed during minification)\n  /** @type Collections<string> */\n  const groups = {}; // of tokens\n  State.groups = groups;\n  /** @type State<string> */\n  const Start = new State();\n  if (tlds == null) {\n    tlds = decodeTlds(encodedTlds);\n  }\n  if (utlds == null) {\n    utlds = decodeTlds(encodedUtlds);\n  }\n\n  // States for special URL symbols that accept immediately after start\n  tt(Start, \"'\", APOSTROPHE);\n  tt(Start, '{', OPENBRACE);\n  tt(Start, '}', CLOSEBRACE);\n  tt(Start, '[', OPENBRACKET);\n  tt(Start, ']', CLOSEBRACKET);\n  tt(Start, '(', OPENPAREN);\n  tt(Start, ')', CLOSEPAREN);\n  tt(Start, '<', OPENANGLEBRACKET);\n  tt(Start, '>', CLOSEANGLEBRACKET);\n  tt(Start, '（', FULLWIDTHLEFTPAREN);\n  tt(Start, '）', FULLWIDTHRIGHTPAREN);\n  tt(Start, '「', LEFTCORNERBRACKET);\n  tt(Start, '」', RIGHTCORNERBRACKET);\n  tt(Start, '『', LEFTWHITECORNERBRACKET);\n  tt(Start, '』', RIGHTWHITECORNERBRACKET);\n  tt(Start, '＜', FULLWIDTHLESSTHAN);\n  tt(Start, '＞', FULLWIDTHGREATERTHAN);\n  tt(Start, '&', AMPERSAND);\n  tt(Start, '*', ASTERISK);\n  tt(Start, '@', AT);\n  tt(Start, '`', BACKTICK);\n  tt(Start, '^', CARET);\n  tt(Start, ':', COLON);\n  tt(Start, ',', COMMA);\n  tt(Start, '$', DOLLAR);\n  tt(Start, '.', DOT);\n  tt(Start, '=', EQUALS);\n  tt(Start, '!', EXCLAMATION);\n  tt(Start, '-', HYPHEN);\n  tt(Start, '%', PERCENT);\n  tt(Start, '|', PIPE);\n  tt(Start, '+', PLUS);\n  tt(Start, '#', POUND);\n  tt(Start, '?', QUERY);\n  tt(Start, '\"', QUOTE);\n  tt(Start, '/', SLASH);\n  tt(Start, ';', SEMI);\n  tt(Start, '~', TILDE);\n  tt(Start, '_', UNDERSCORE);\n  tt(Start, '\\\\', BACKSLASH);\n  tt(Start, '・', FULLWIDTHMIDDLEDOT);\n  const Num = tr(Start, DIGIT, NUM, {\n    [numeric]: true\n  });\n  tr(Num, DIGIT, Num);\n  const Asciinumeric = tr(Num, ASCII_LETTER, ASCIINUMERICAL, {\n    [asciinumeric]: true\n  });\n  const Alphanumeric = tr(Num, LETTER, ALPHANUMERICAL, {\n    [alphanumeric]: true\n  });\n\n  // State which emits a word token\n  const Word = tr(Start, ASCII_LETTER, WORD, {\n    [ascii]: true\n  });\n  tr(Word, DIGIT, Asciinumeric);\n  tr(Word, ASCII_LETTER, Word);\n  tr(Asciinumeric, DIGIT, Asciinumeric);\n  tr(Asciinumeric, ASCII_LETTER, Asciinumeric);\n\n  // Same as previous, but specific to non-fsm.ascii alphabet words\n  const UWord = tr(Start, LETTER, UWORD, {\n    [alpha]: true\n  });\n  tr(UWord, ASCII_LETTER); // Non-accepting\n  tr(UWord, DIGIT, Alphanumeric);\n  tr(UWord, LETTER, UWord);\n  tr(Alphanumeric, DIGIT, Alphanumeric);\n  tr(Alphanumeric, ASCII_LETTER); // Non-accepting\n  tr(Alphanumeric, LETTER, Alphanumeric); // Non-accepting\n\n  // Whitespace jumps\n  // Tokens of only non-newline whitespace are arbitrarily long\n  // If any whitespace except newline, more whitespace!\n  const Nl = tt(Start, LF, NL, {\n    [whitespace]: true\n  });\n  const Cr = tt(Start, CR, WS, {\n    [whitespace]: true\n  });\n  const Ws = tr(Start, SPACE, WS, {\n    [whitespace]: true\n  });\n  tt(Start, OBJECT_REPLACEMENT, Ws);\n  tt(Cr, LF, Nl); // \\r\\n\n  tt(Cr, OBJECT_REPLACEMENT, Ws);\n  tr(Cr, SPACE, Ws);\n  tt(Ws, CR); // non-accepting state to avoid mixing whitespaces\n  tt(Ws, LF); // non-accepting state to avoid mixing whitespaces\n  tr(Ws, SPACE, Ws);\n  tt(Ws, OBJECT_REPLACEMENT, Ws);\n\n  // Emoji tokens. They are not grouped by the scanner except in cases where a\n  // zero-width joiner is present\n  const Emoji = tr(Start, EMOJI, EMOJI$1, {\n    [emoji]: true\n  });\n  tt(Emoji, '#'); // no transition, emoji regex seems to match #\n  tr(Emoji, EMOJI, Emoji);\n  tt(Emoji, EMOJI_VARIATION, Emoji);\n  // tt(Start, EMOJI_VARIATION, Emoji); // This one is sketchy\n\n  const EmojiJoiner = tt(Emoji, EMOJI_JOINER);\n  tt(EmojiJoiner, '#');\n  tr(EmojiJoiner, EMOJI, Emoji);\n  // tt(EmojiJoiner, EMOJI_VARIATION, Emoji); // also sketchy\n\n  // Generates states for top-level domains\n  // Note that this is most accurate when tlds are in alphabetical order\n  const wordjr = [[ASCII_LETTER, Word], [DIGIT, Asciinumeric]];\n  const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord], [DIGIT, Alphanumeric]];\n  for (let i = 0; i < tlds.length; i++) {\n    fastts(Start, tlds[i], TLD, WORD, wordjr);\n  }\n  for (let i = 0; i < utlds.length; i++) {\n    fastts(Start, utlds[i], UTLD, UWORD, uwordjr);\n  }\n  addToGroups(TLD, {\n    tld: true,\n    ascii: true\n  }, groups);\n  addToGroups(UTLD, {\n    utld: true,\n    alpha: true\n  }, groups);\n\n  // Collect the states generated by different protocols. NOTE: If any new TLDs\n  // get added that are also protocols, set the token to be the same as the\n  // protocol to ensure parsing works as expected.\n  fastts(Start, 'file', SCHEME, WORD, wordjr);\n  fastts(Start, 'mailto', SCHEME, WORD, wordjr);\n  fastts(Start, 'http', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'https', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftp', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftps', SLASH_SCHEME, WORD, wordjr);\n  addToGroups(SCHEME, {\n    scheme: true,\n    ascii: true\n  }, groups);\n  addToGroups(SLASH_SCHEME, {\n    slashscheme: true,\n    ascii: true\n  }, groups);\n\n  // Register custom schemes. Assumes each scheme is asciinumeric with hyphens\n  customSchemes = customSchemes.sort((a, b) => a[0] > b[0] ? 1 : -1);\n  for (let i = 0; i < customSchemes.length; i++) {\n    const sch = customSchemes[i][0];\n    const optionalSlashSlash = customSchemes[i][1];\n    const flags = optionalSlashSlash ? {\n      [scheme]: true\n    } : {\n      [slashscheme]: true\n    };\n    if (sch.indexOf('-') >= 0) {\n      flags[domain] = true;\n    } else if (!ASCII_LETTER.test(sch)) {\n      flags[numeric] = true; // numbers only\n    } else if (DIGIT.test(sch)) {\n      flags[asciinumeric] = true;\n    } else {\n      flags[ascii] = true;\n    }\n    ts(Start, sch, sch, flags);\n  }\n\n  // Localhost token\n  ts(Start, 'localhost', LOCALHOST, {\n    ascii: true\n  });\n\n  // Set default transition for start state (some symbol)\n  Start.jd = new State(SYM);\n  return {\n    start: Start,\n    tokens: Object.assign({\n      groups\n    }, tk)\n  };\n}\n\n/**\n\tGiven a string, returns an array of TOKEN instances representing the\n\tcomposition of that string.\n\n\t@method run\n\t@param {State<string>} start scanner starting state\n\t@param {string} str input string to scan\n\t@return {Token[]} list of tokens, each with a type and value\n*/\nfunction run$1(start, str) {\n  // State machine is not case sensitive, so input is tokenized in lowercased\n  // form (still returns regular case). Uses selective `toLowerCase` because\n  // lowercasing the entire string causes the length and character position to\n  // vary in some non-English strings with V8-based runtimes.\n  const iterable = stringToArray(str.replace(/[A-Z]/g, c => c.toLowerCase()));\n  const charCount = iterable.length; // <= len if there are emojis, etc\n  const tokens = []; // return value\n\n  // cursor through the string itself, accounting for characters that have\n  // width with length 2 such as emojis\n  let cursor = 0;\n\n  // Cursor through the array-representation of the string\n  let charCursor = 0;\n\n  // Tokenize the string\n  while (charCursor < charCount) {\n    let state = start;\n    let nextState = null;\n    let tokenLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    let charsSinceAccepts = -1;\n    while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {\n      state = nextState;\n\n      // Keep track of the latest accepting state\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        charsSinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts += iterable[charCursor].length;\n        charsSinceAccepts++;\n      }\n      tokenLength += iterable[charCursor].length;\n      cursor += iterable[charCursor].length;\n      charCursor++;\n    }\n\n    // Roll back to the latest accepting state\n    cursor -= sinceAccepts;\n    charCursor -= charsSinceAccepts;\n    tokenLength -= sinceAccepts;\n\n    // No more jumps, just make a new token from the last accepting one\n    tokens.push({\n      t: latestAccepting.t,\n      // token type/name\n      v: str.slice(cursor - tokenLength, cursor),\n      // string value\n      s: cursor - tokenLength,\n      // start index\n      e: cursor // end index (excluding)\n    });\n  }\n  return tokens;\n}\n\n/**\n * Convert a String to an Array of characters, taking into account that some\n * characters like emojis take up two string indexes.\n *\n * Adapted from core-js (MIT license)\n * https://github.com/zloirock/core-js/blob/2d69cf5f99ab3ea3463c395df81e5a15b68f49d9/packages/core-js/internals/string-multibyte.js\n *\n * @function stringToArray\n * @param {string} str\n * @returns {string[]}\n */\nfunction stringToArray(str) {\n  const result = [];\n  const len = str.length;\n  let index = 0;\n  while (index < len) {\n    let first = str.charCodeAt(index);\n    let second;\n    let char = first < 0xd800 || first > 0xdbff || index + 1 === len || (second = str.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? str[index] // single character\n    : str.slice(index, index + 2); // two-index characters\n    result.push(char);\n    index += char.length;\n  }\n  return result;\n}\n\n/**\n * Fast version of ts function for when transition defaults are well known\n * @param {State<string>} state\n * @param {string} input\n * @param {string} t\n * @param {string} defaultt\n * @param {[RegExp, State<string>][]} jr\n * @returns {State<string>}\n */\nfunction fastts(state, input, t, defaultt, jr) {\n  let next;\n  const len = input.length;\n  for (let i = 0; i < len - 1; i++) {\n    const char = input[i];\n    if (state.j[char]) {\n      next = state.j[char];\n    } else {\n      next = new State(defaultt);\n      next.jr = jr.slice();\n      state.j[char] = next;\n    }\n    state = next;\n  }\n  next = new State(t);\n  next.jr = jr.slice();\n  state.j[input[len - 1]] = next;\n  return next;\n}\n\n/**\n * Converts a string of Top-Level Domain names encoded in update-tlds.js back\n * into a list of strings.\n * @param {str} encoded encoded TLDs string\n * @returns {str[]} original TLDs list\n */\nfunction decodeTlds(encoded) {\n  const words = [];\n  const stack = [];\n  let i = 0;\n  let digits = '0123456789';\n  while (i < encoded.length) {\n    let popDigitCount = 0;\n    while (digits.indexOf(encoded[i + popDigitCount]) >= 0) {\n      popDigitCount++; // encountered some digits, have to pop to go one level up trie\n    }\n    if (popDigitCount > 0) {\n      words.push(stack.join('')); // whatever preceded the pop digits must be a word\n      for (let popCount = parseInt(encoded.substring(i, i + popDigitCount), 10); popCount > 0; popCount--) {\n        stack.pop();\n      }\n      i += popDigitCount;\n    } else {\n      stack.push(encoded[i]); // drop down a level into the trie\n      i++;\n    }\n  }\n  return words;\n}\n\n/**\n * An object where each key is a valid DOM Event Name such as `click` or `focus`\n * and each value is an event handler function.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Element#events\n * @typedef {?{ [event: string]: Function }} EventListeners\n */\n\n/**\n * All formatted properties required to render a link, including `tagName`,\n * `attributes`, `content` and `eventListeners`.\n * @typedef {{ tagName: any, attributes: {[attr: string]: any}, content: string,\n * eventListeners: EventListeners }} IntermediateRepresentation\n */\n\n/**\n * Specify either an object described by the template type `O` or a function.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `O`\n * @template O\n * @typedef {O | ((value: string, type: string, token: MultiToken) => O)} OptObj\n */\n\n/**\n * Specify either a function described by template type `F` or an object.\n *\n * Each key in the object should be a link type (`'url'`, `'hashtag`', etc.). Each\n * value should be a function with template type `F` that is called when the\n * corresponding link type is encountered.\n * @template F\n * @typedef {F | { [type: string]: F}} OptFn\n */\n\n/**\n * Specify either a value with template type `V`, a function that returns `V` or\n * an object where each value resolves to `V`.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `V`\n *\n * For the object, each key should be a link type (`'url'`, `'hashtag`', etc.).\n * Each value should either have type `V` or a function that returns V. This\n * function similarly takes a string value and a token.\n *\n * Example valid types for `Opt<string>`:\n *\n * ```js\n * 'hello'\n * (value, type, token) => 'world'\n * { url: 'hello', email: (value, token) => 'world'}\n * ```\n * @template V\n * @typedef {V | ((value: string, type: string, token: MultiToken) => V) | { [type: string]: V | ((value: string, token: MultiToken) => V) }} Opt\n */\n\n/**\n * See available options: https://linkify.js.org/docs/options.html\n * @typedef {{\n * \tdefaultProtocol?: string,\n *  events?: OptObj<EventListeners>,\n * \tformat?: Opt<string>,\n * \tformatHref?: Opt<string>,\n * \tnl2br?: boolean,\n * \ttagName?: Opt<any>,\n * \ttarget?: Opt<string>,\n * \trel?: Opt<string>,\n * \tvalidate?: Opt<boolean>,\n * \ttruncate?: Opt<number>,\n * \tclassName?: Opt<string>,\n * \tattributes?: OptObj<({ [attr: string]: any })>,\n *  ignoreTags?: string[],\n * \trender?: OptFn<((ir: IntermediateRepresentation) => any)>\n * }} Opts\n */\n\n/**\n * @type Required<Opts>\n */\nconst defaults = {\n  defaultProtocol: 'http',\n  events: null,\n  format: noop,\n  formatHref: noop,\n  nl2br: false,\n  tagName: 'a',\n  target: null,\n  rel: null,\n  validate: true,\n  truncate: Infinity,\n  className: null,\n  attributes: null,\n  ignoreTags: [],\n  render: null\n};\n\n/**\n * Utility class for linkify interfaces to apply specified\n * {@link Opts formatting and rendering options}.\n *\n * @param {Opts | Options} [opts] Option value overrides.\n * @param {(ir: IntermediateRepresentation) => any} [defaultRender] (For\n *   internal use) default render function that determines how to generate an\n *   HTML element based on a link token's derived tagName, attributes and HTML.\n *   Similar to render option\n */\nfunction Options(opts, defaultRender = null) {\n  let o = Object.assign({}, defaults);\n  if (opts) {\n    o = Object.assign(o, opts instanceof Options ? opts.o : opts);\n  }\n\n  // Ensure all ignored tags are uppercase\n  const ignoredTags = o.ignoreTags;\n  const uppercaseIgnoredTags = [];\n  for (let i = 0; i < ignoredTags.length; i++) {\n    uppercaseIgnoredTags.push(ignoredTags[i].toUpperCase());\n  }\n  /** @protected */\n  this.o = o;\n  if (defaultRender) {\n    this.defaultRender = defaultRender;\n  }\n  this.ignoreTags = uppercaseIgnoredTags;\n}\nOptions.prototype = {\n  o: defaults,\n  /**\n   * @type string[]\n   */\n  ignoreTags: [],\n  /**\n   * @param {IntermediateRepresentation} ir\n   * @returns {any}\n   */\n  defaultRender(ir) {\n    return ir;\n  },\n  /**\n   * Returns true or false based on whether a token should be displayed as a\n   * link based on the user options.\n   * @param {MultiToken} token\n   * @returns {boolean}\n   */\n  check(token) {\n    return this.get('validate', token.toString(), token);\n  },\n  // Private methods\n\n  /**\n   * Resolve an option's value based on the value of the option and the given\n   * params. If operator and token are specified and the target option is\n   * callable, automatically calls the function with the given argument.\n   * @template {keyof Opts} K\n   * @param {K} key Name of option to use\n   * @param {string} [operator] will be passed to the target option if it's a\n   * function. If not specified, RAW function value gets returned\n   * @param {MultiToken} [token] The token from linkify.tokenize\n   * @returns {Opts[K] | any}\n   */\n  get(key, operator, token) {\n    const isCallable = operator != null;\n    let option = this.o[key];\n    if (!option) {\n      return option;\n    }\n    if (typeof option === 'object') {\n      option = token.t in option ? option[token.t] : defaults[key];\n      if (typeof option === 'function' && isCallable) {\n        option = option(operator, token);\n      }\n    } else if (typeof option === 'function' && isCallable) {\n      option = option(operator, token.t, token);\n    }\n    return option;\n  },\n  /**\n   * @template {keyof Opts} L\n   * @param {L} key Name of options object to use\n   * @param {string} [operator]\n   * @param {MultiToken} [token]\n   * @returns {Opts[L] | any}\n   */\n  getObj(key, operator, token) {\n    let obj = this.o[key];\n    if (typeof obj === 'function' && operator != null) {\n      obj = obj(operator, token.t, token);\n    }\n    return obj;\n  },\n  /**\n   * Convert the given token to a rendered element that may be added to the\n   * calling-interface's DOM\n   * @param {MultiToken} token Token to render to an HTML element\n   * @returns {any} Render result; e.g., HTML string, DOM element, React\n   *   Component, etc.\n   */\n  render(token) {\n    const ir = token.render(this); // intermediate representation\n    const renderFn = this.get('render', null, token) || this.defaultRender;\n    return renderFn(ir, token.t, token);\n  }\n};\nfunction noop(val) {\n  return val;\n}\n\nvar options = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tOptions: Options,\n\tdefaults: defaults\n});\n\n/******************************************************************************\n\tMulti-Tokens\n\tTokens composed of arrays of TextTokens\n******************************************************************************/\n\n/**\n * @param {string} value\n * @param {Token[]} tokens\n */\nfunction MultiToken(value, tokens) {\n  this.t = 'token';\n  this.v = value;\n  this.tk = tokens;\n}\n\n/**\n * Abstract class used for manufacturing tokens of text tokens. That is rather\n * than the value for a token being a small string of text, it's value an array\n * of text tokens.\n *\n * Used for grouping together URLs, emails, hashtags, and other potential\n * creations.\n * @class MultiToken\n * @property {string} t\n * @property {string} v\n * @property {Token[]} tk\n * @abstract\n */\nMultiToken.prototype = {\n  isLink: false,\n  /**\n   * Return the string this token represents.\n   * @return {string}\n   */\n  toString() {\n    return this.v;\n  },\n  /**\n   * What should the value for this token be in the `href` HTML attribute?\n   * Returns the `.toString` value by default.\n   * @param {string} [scheme]\n   * @return {string}\n   */\n  toHref(scheme) {\n    return this.toString();\n  },\n  /**\n   * @param {Options} options Formatting options\n   * @returns {string}\n   */\n  toFormattedString(options) {\n    const val = this.toString();\n    const truncate = options.get('truncate', val, this);\n    const formatted = options.get('format', val, this);\n    return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + '…' : formatted;\n  },\n  /**\n   *\n   * @param {Options} options\n   * @returns {string}\n   */\n  toFormattedHref(options) {\n    return options.get('formatHref', this.toHref(options.get('defaultProtocol')), this);\n  },\n  /**\n   * The start index of this token in the original input string\n   * @returns {number}\n   */\n  startIndex() {\n    return this.tk[0].s;\n  },\n  /**\n   * The end index of this token in the original input string (up to this\n   * index but not including it)\n   * @returns {number}\n   */\n  endIndex() {\n    return this.tk[this.tk.length - 1].e;\n  },\n  /**\n  \tReturns an object  of relevant values for this token, which includes keys\n  \t* type - Kind of token ('url', 'email', etc.)\n  \t* value - Original text\n  \t* href - The value that should be added to the anchor tag's href\n  \t\tattribute\n  \t\t@method toObject\n  \t@param {string} [protocol] `'http'` by default\n  */\n  toObject(protocol = defaults.defaultProtocol) {\n    return {\n      type: this.t,\n      value: this.toString(),\n      isLink: this.isLink,\n      href: this.toHref(protocol),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   *\n   * @param {Options} options Formatting option\n   */\n  toFormattedObject(options) {\n    return {\n      type: this.t,\n      value: this.toFormattedString(options),\n      isLink: this.isLink,\n      href: this.toFormattedHref(options),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   * Whether this token should be rendered as a link according to the given options\n   * @param {Options} options\n   * @returns {boolean}\n   */\n  validate(options) {\n    return options.get('validate', this.toString(), this);\n  },\n  /**\n   * Return an object that represents how this link should be rendered.\n   * @param {Options} options Formattinng options\n   */\n  render(options) {\n    const token = this;\n    const href = this.toHref(options.get('defaultProtocol'));\n    const formattedHref = options.get('formatHref', href, this);\n    const tagName = options.get('tagName', href, token);\n    const content = this.toFormattedString(options);\n    const attributes = {};\n    const className = options.get('className', href, token);\n    const target = options.get('target', href, token);\n    const rel = options.get('rel', href, token);\n    const attrs = options.getObj('attributes', href, token);\n    const eventListeners = options.getObj('events', href, token);\n    attributes.href = formattedHref;\n    if (className) {\n      attributes.class = className;\n    }\n    if (target) {\n      attributes.target = target;\n    }\n    if (rel) {\n      attributes.rel = rel;\n    }\n    if (attrs) {\n      Object.assign(attributes, attrs);\n    }\n    return {\n      tagName,\n      attributes,\n      content,\n      eventListeners\n    };\n  }\n};\n\n/**\n * Create a new token that can be emitted by the parser state machine\n * @param {string} type readable type of the token\n * @param {object} props properties to assign or override, including isLink = true or false\n * @returns {new (value: string, tokens: Token[]) => MultiToken} new token class\n */\nfunction createTokenClass(type, props) {\n  class Token extends MultiToken {\n    constructor(value, tokens) {\n      super(value, tokens);\n      this.t = type;\n    }\n  }\n  for (const p in props) {\n    Token.prototype[p] = props[p];\n  }\n  Token.t = type;\n  return Token;\n}\n\n/**\n\tRepresents a list of tokens making up a valid email address\n*/\nconst Email = createTokenClass('email', {\n  isLink: true,\n  toHref() {\n    return 'mailto:' + this.toString();\n  }\n});\n\n/**\n\tRepresents some plain text\n*/\nconst Text = createTokenClass('text');\n\n/**\n\tMulti-linebreak token - represents a line break\n\t@class Nl\n*/\nconst Nl = createTokenClass('nl');\n\n/**\n\tRepresents a list of text tokens making up a valid URL\n\t@class Url\n*/\nconst Url = createTokenClass('url', {\n  isLink: true,\n  /**\n  \tLowercases relevant parts of the domain and adds the protocol if\n  \trequired. Note that this will not escape unsafe HTML characters in the\n  \tURL.\n  \t\t@param {string} [scheme] default scheme (e.g., 'https')\n  \t@return {string} the full href\n  */\n  toHref(scheme = defaults.defaultProtocol) {\n    // Check if already has a prefix scheme\n    return this.hasProtocol() ? this.v : `${scheme}://${this.v}`;\n  },\n  /**\n   * Check whether this URL token has a protocol\n   * @return {boolean}\n   */\n  hasProtocol() {\n    const tokens = this.tk;\n    return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;\n  }\n});\n\nvar multi = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBase: MultiToken,\n\tEmail: Email,\n\tMultiToken: MultiToken,\n\tNl: Nl,\n\tText: Text,\n\tUrl: Url,\n\tcreateTokenClass: createTokenClass\n});\n\n/**\n\tNot exactly parser, more like the second-stage scanner (although we can\n\ttheoretically hotswap the code here with a real parser in the future... but\n\tfor a little URL-finding utility abstract syntax trees may be a little\n\toverkill).\n\n\tURL format: http://en.wikipedia.org/wiki/URI_scheme\n\tEmail format: http://en.wikipedia.org/wiki/EmailAddress (links to RFC in\n\treference)\n\n\t@module linkify\n\t@submodule parser\n\t@main run\n*/\n\nconst makeState = arg => new State(arg);\n\n/**\n * Generate the parser multi token-based state machine\n * @param {{ groups: Collections<string> }} tokens\n */\nfunction init$1({\n  groups\n}) {\n  // Types of characters the URL can definitely end in\n  const qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]);\n\n  // Types of tokens that can follow a URL and be part of the query string\n  // but cannot be the very last characters\n  // Characters that cannot appear in the URL at all should be excluded\n  const qsNonAccepting = [APOSTROPHE, COLON, COMMA, DOT, EXCLAMATION, PERCENT, QUERY, QUOTE, SEMI, OPENANGLEBRACKET, CLOSEANGLEBRACKET, OPENBRACE, CLOSEBRACE, CLOSEBRACKET, OPENBRACKET, OPENPAREN, CLOSEPAREN, FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN, LEFTCORNERBRACKET, RIGHTCORNERBRACKET, LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET, FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN];\n\n  // For addresses without the mailto prefix\n  // Tokens allowed in the localpart of the email\n  const localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, OPENBRACE, CLOSEBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE];\n\n  // The universal starting state.\n  /**\n   * @type State<Token>\n   */\n  const Start = makeState();\n  const Localpart = tt(Start, TILDE); // Local part of the email address\n  ta(Localpart, localpartAccepting, Localpart);\n  ta(Localpart, groups.domain, Localpart);\n  const Domain = makeState(),\n    Scheme = makeState(),\n    SlashScheme = makeState();\n  ta(Start, groups.domain, Domain); // parsed string ends with a potential domain name (A)\n  ta(Start, groups.scheme, Scheme); // e.g., 'mailto'\n  ta(Start, groups.slashscheme, SlashScheme); // e.g., 'http'\n\n  ta(Domain, localpartAccepting, Localpart);\n  ta(Domain, groups.domain, Domain);\n  const LocalpartAt = tt(Domain, AT); // Local part of the email address plus @\n\n  tt(Localpart, AT, LocalpartAt); // close to an email address now\n\n  // Local part of an email address can be e.g. 'http' or 'mailto'\n  tt(Scheme, AT, LocalpartAt);\n  tt(SlashScheme, AT, LocalpartAt);\n  const LocalpartDot = tt(Localpart, DOT); // Local part of the email address plus '.' (localpart cannot end in .)\n  ta(LocalpartDot, localpartAccepting, Localpart);\n  ta(LocalpartDot, groups.domain, Localpart);\n  const EmailDomain = makeState();\n  ta(LocalpartAt, groups.domain, EmailDomain); // parsed string starts with local email info + @ with a potential domain name\n  ta(EmailDomain, groups.domain, EmailDomain);\n  const EmailDomainDot = tt(EmailDomain, DOT); // domain followed by DOT\n  ta(EmailDomainDot, groups.domain, EmailDomain);\n  const Email$1 = makeState(Email); // Possible email address (could have more tlds)\n  ta(EmailDomainDot, groups.tld, Email$1);\n  ta(EmailDomainDot, groups.utld, Email$1);\n  tt(LocalpartAt, LOCALHOST, Email$1);\n\n  // Hyphen can jump back to a domain name\n  const EmailDomainHyphen = tt(EmailDomain, HYPHEN); // parsed string starts with local email info + @ with a potential domain name\n  tt(EmailDomainHyphen, HYPHEN, EmailDomainHyphen);\n  ta(EmailDomainHyphen, groups.domain, EmailDomain);\n  ta(Email$1, groups.domain, EmailDomain);\n  tt(Email$1, DOT, EmailDomainDot);\n  tt(Email$1, HYPHEN, EmailDomainHyphen);\n\n  // Final possible email states\n  const EmailColon = tt(Email$1, COLON); // URL followed by colon (potential port number here)\n  /*const EmailColonPort = */\n  ta(EmailColon, groups.numeric, Email); // URL followed by colon and port number\n\n  // Account for dots and hyphens. Hyphens are usually parts of domain names\n  // (but not TLDs)\n  const DomainHyphen = tt(Domain, HYPHEN); // domain followed by hyphen\n  const DomainDot = tt(Domain, DOT); // domain followed by DOT\n  tt(DomainHyphen, HYPHEN, DomainHyphen);\n  ta(DomainHyphen, groups.domain, Domain);\n  ta(DomainDot, localpartAccepting, Localpart);\n  ta(DomainDot, groups.domain, Domain);\n  const DomainDotTld = makeState(Url); // Simplest possible URL with no query string\n  ta(DomainDot, groups.tld, DomainDotTld);\n  ta(DomainDot, groups.utld, DomainDotTld);\n  ta(DomainDotTld, groups.domain, Domain);\n  ta(DomainDotTld, localpartAccepting, Localpart);\n  tt(DomainDotTld, DOT, DomainDot);\n  tt(DomainDotTld, HYPHEN, DomainHyphen);\n  tt(DomainDotTld, AT, LocalpartAt);\n  const DomainDotTldColon = tt(DomainDotTld, COLON); // URL followed by colon (potential port number here)\n  const DomainDotTldColonPort = makeState(Url); // TLD followed by a port number\n  ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);\n\n  // Long URL with optional port and maybe query string\n  const Url$1 = makeState(Url);\n\n  // URL with extra symbols at the end, followed by an opening bracket\n  const UrlNonaccept = makeState(); // URL followed by some symbols (will not be part of the final URL)\n\n  // Query strings\n  ta(Url$1, qsAccepting, Url$1);\n  ta(Url$1, qsNonAccepting, UrlNonaccept);\n  ta(UrlNonaccept, qsAccepting, Url$1);\n  ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);\n\n  // Become real URLs after `SLASH` or `COLON NUM SLASH`\n  // Here works with or without scheme:// prefix\n  tt(DomainDotTld, SLASH, Url$1);\n  tt(DomainDotTldColonPort, SLASH, Url$1);\n\n  // Note that domains that begin with schemes are treated slighly differently\n  const SchemeColon = tt(Scheme, COLON); // e.g., 'mailto:'\n  const SlashSchemeColon = tt(SlashScheme, COLON); // e.g., 'http:'\n  const SlashSchemeColonSlash = tt(SlashSchemeColon, SLASH); // e.g., 'http:/'\n\n  const UriPrefix = tt(SlashSchemeColonSlash, SLASH); // e.g., 'http://'\n\n  // Scheme states can transition to domain states\n  ta(Scheme, groups.domain, Domain);\n  tt(Scheme, DOT, DomainDot);\n  tt(Scheme, HYPHEN, DomainHyphen);\n  ta(SlashScheme, groups.domain, Domain);\n  tt(SlashScheme, DOT, DomainDot);\n  tt(SlashScheme, HYPHEN, DomainHyphen);\n\n  // Force URL with scheme prefix followed by anything sane\n  ta(SchemeColon, groups.domain, Url$1);\n  tt(SchemeColon, SLASH, Url$1);\n  tt(SchemeColon, QUERY, Url$1);\n  ta(UriPrefix, groups.domain, Url$1);\n  ta(UriPrefix, qsAccepting, Url$1);\n  tt(UriPrefix, SLASH, Url$1);\n  const bracketPairs = [[OPENBRACE, CLOSEBRACE],\n  // {}\n  [OPENBRACKET, CLOSEBRACKET],\n  // []\n  [OPENPAREN, CLOSEPAREN],\n  // ()\n  [OPENANGLEBRACKET, CLOSEANGLEBRACKET],\n  // <>\n  [FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN],\n  // （）\n  [LEFTCORNERBRACKET, RIGHTCORNERBRACKET],\n  // 「」\n  [LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET],\n  // 『』\n  [FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN] // ＜＞\n  ];\n  for (let i = 0; i < bracketPairs.length; i++) {\n    const [OPEN, CLOSE] = bracketPairs[i];\n    const UrlOpen = tt(Url$1, OPEN); // URL followed by open bracket\n\n    // Continue not accepting for open brackets\n    tt(UrlNonaccept, OPEN, UrlOpen);\n\n    // Closing bracket component. This character WILL be included in the URL\n    tt(UrlOpen, CLOSE, Url$1);\n\n    // URL that beings with an opening bracket, followed by a symbols.\n    // Note that the final state can still be `UrlOpen` (if the URL has a\n    // single opening bracket for some reason).\n    const UrlOpenQ = makeState(Url);\n    ta(UrlOpen, qsAccepting, UrlOpenQ);\n    const UrlOpenSyms = makeState(); // UrlOpen followed by some symbols it cannot end it\n    ta(UrlOpen, qsNonAccepting);\n\n    // URL that begins with an opening bracket, followed by some symbols\n    ta(UrlOpenQ, qsAccepting, UrlOpenQ);\n    ta(UrlOpenQ, qsNonAccepting, UrlOpenSyms);\n    ta(UrlOpenSyms, qsAccepting, UrlOpenQ);\n    ta(UrlOpenSyms, qsNonAccepting, UrlOpenSyms);\n\n    // Close brace/bracket to become regular URL\n    tt(UrlOpenQ, CLOSE, Url$1);\n    tt(UrlOpenSyms, CLOSE, Url$1);\n  }\n  tt(Start, LOCALHOST, DomainDotTld); // localhost is a valid URL state\n  tt(Start, NL, Nl); // single new line\n\n  return {\n    start: Start,\n    tokens: tk\n  };\n}\n\n/**\n * Run the parser state machine on a list of scanned string-based tokens to\n * create a list of multi tokens, each of which represents a URL, email address,\n * plain text, etc.\n *\n * @param {State<MultiToken>} start parser start state\n * @param {string} input the original input used to generate the given tokens\n * @param {Token[]} tokens list of scanned tokens\n * @returns {MultiToken[]}\n */\nfunction run(start, input, tokens) {\n  let len = tokens.length;\n  let cursor = 0;\n  let multis = [];\n  let textTokens = [];\n  while (cursor < len) {\n    let state = start;\n    let secondState = null;\n    let nextState = null;\n    let multiLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    while (cursor < len && !(secondState = state.go(tokens[cursor].t))) {\n      // Starting tokens with nowhere to jump to.\n      // Consider these to be just plain text\n      textTokens.push(tokens[cursor++]);\n    }\n    while (cursor < len && (nextState = secondState || state.go(tokens[cursor].t))) {\n      // Get the next state\n      secondState = null;\n      state = nextState;\n\n      // Keep track of the latest accepting state\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts++;\n      }\n      cursor++;\n      multiLength++;\n    }\n    if (sinceAccepts < 0) {\n      // No accepting state was found, part of a regular text token add\n      // the first text token to the text tokens array and try again from\n      // the next\n      cursor -= multiLength;\n      if (cursor < len) {\n        textTokens.push(tokens[cursor]);\n        cursor++;\n      }\n    } else {\n      // Accepting state!\n      // First close off the textTokens (if available)\n      if (textTokens.length > 0) {\n        multis.push(initMultiToken(Text, input, textTokens));\n        textTokens = [];\n      }\n\n      // Roll back to the latest accepting state\n      cursor -= sinceAccepts;\n      multiLength -= sinceAccepts;\n\n      // Create a new multitoken\n      const Multi = latestAccepting.t;\n      const subtokens = tokens.slice(cursor - multiLength, cursor);\n      multis.push(initMultiToken(Multi, input, subtokens));\n    }\n  }\n\n  // Finally close off the textTokens (if available)\n  if (textTokens.length > 0) {\n    multis.push(initMultiToken(Text, input, textTokens));\n  }\n  return multis;\n}\n\n/**\n * Utility function for instantiating a new multitoken with all the relevant\n * fields during parsing.\n * @param {new (value: string, tokens: Token[]) => MultiToken} Multi class to instantiate\n * @param {string} input original input string\n * @param {Token[]} tokens consecutive tokens scanned from input string\n * @returns {MultiToken}\n */\nfunction initMultiToken(Multi, input, tokens) {\n  const startIdx = tokens[0].s;\n  const endIdx = tokens[tokens.length - 1].e;\n  const value = input.slice(startIdx, endIdx);\n  return new Multi(value, tokens);\n}\n\nconst warn = typeof console !== 'undefined' && console && console.warn || (() => {});\nconst warnAdvice = 'until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.';\n\n// Side-effect initialization state\nconst INIT = {\n  scanner: null,\n  parser: null,\n  tokenQueue: [],\n  pluginQueue: [],\n  customSchemes: [],\n  initialized: false\n};\n\n/**\n * @typedef {{\n * \tstart: State<string>,\n * \ttokens: { groups: Collections<string> } & typeof tk\n * }} ScannerInit\n */\n\n/**\n * @typedef {{\n * \tstart: State<MultiToken>,\n * \ttokens: typeof multi\n * }} ParserInit\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit }) => void} TokenPlugin\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit, parser: ParserInit }) => void} Plugin\n */\n\n/**\n * De-register all plugins and reset the internal state-machine. Used for\n * testing; not required in practice.\n * @private\n */\nfunction reset() {\n  State.groups = {};\n  INIT.scanner = null;\n  INIT.parser = null;\n  INIT.tokenQueue = [];\n  INIT.pluginQueue = [];\n  INIT.customSchemes = [];\n  INIT.initialized = false;\n  return INIT;\n}\n\n/**\n * Register a token plugin to allow the scanner to recognize additional token\n * types before the parser state machine is constructed from the results.\n * @param {string} name of plugin to register\n * @param {TokenPlugin} plugin function that accepts the scanner state machine\n * and available scanner tokens and collections and extends the state machine to\n * recognize additional tokens or groups.\n */\nfunction registerTokenPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(`linkifyjs: Invalid token plugin ${plugin} (expects function)`);\n  }\n  for (let i = 0; i < INIT.tokenQueue.length; i++) {\n    if (name === INIT.tokenQueue[i][0]) {\n      warn(`linkifyjs: token plugin \"${name}\" already registered - will be overwritten`);\n      INIT.tokenQueue[i] = [name, plugin];\n      return;\n    }\n  }\n  INIT.tokenQueue.push([name, plugin]);\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register token plugin \"${name}\" ${warnAdvice}`);\n  }\n}\n\n/**\n * Register a linkify plugin\n * @param {string} name of plugin to register\n * @param {Plugin} plugin function that accepts the parser state machine and\n * extends the parser to recognize additional link types\n */\nfunction registerPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(`linkifyjs: Invalid plugin ${plugin} (expects function)`);\n  }\n  for (let i = 0; i < INIT.pluginQueue.length; i++) {\n    if (name === INIT.pluginQueue[i][0]) {\n      warn(`linkifyjs: plugin \"${name}\" already registered - will be overwritten`);\n      INIT.pluginQueue[i] = [name, plugin];\n      return;\n    }\n  }\n  INIT.pluginQueue.push([name, plugin]);\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register plugin \"${name}\" ${warnAdvice}`);\n  }\n}\n\n/**\n * Detect URLs with the following additional protocol. Anything with format\n * \"protocol://...\" will be considered a link. If `optionalSlashSlash` is set to\n * `true`, anything with format \"protocol:...\" will be considered a link.\n * @param {string} scheme\n * @param {boolean} [optionalSlashSlash]\n */\nfunction registerCustomProtocol(scheme, optionalSlashSlash = false) {\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register custom scheme \"${scheme}\" ${warnAdvice}`);\n  }\n  if (!/^[0-9a-z]+(-[0-9a-z]+)*$/.test(scheme)) {\n    throw new Error(`linkifyjs: incorrect scheme format.\n1. Must only contain digits, lowercase ASCII letters or \"-\"\n2. Cannot start or end with \"-\"\n3. \"-\" cannot repeat`);\n  }\n  INIT.customSchemes.push([scheme, optionalSlashSlash]);\n}\n\n/**\n * Initialize the linkify state machine. Called automatically the first time\n * linkify is called on a string, but may be called manually as well.\n */\nfunction init() {\n  // Initialize scanner state machine and plugins\n  INIT.scanner = init$2(INIT.customSchemes);\n  for (let i = 0; i < INIT.tokenQueue.length; i++) {\n    INIT.tokenQueue[i][1]({\n      scanner: INIT.scanner\n    });\n  }\n\n  // Initialize parser state machine and plugins\n  INIT.parser = init$1(INIT.scanner.tokens);\n  for (let i = 0; i < INIT.pluginQueue.length; i++) {\n    INIT.pluginQueue[i][1]({\n      scanner: INIT.scanner,\n      parser: INIT.parser\n    });\n  }\n  INIT.initialized = true;\n  return INIT;\n}\n\n/**\n * Parse a string into tokens that represent linkable and non-linkable sub-components\n * @param {string} str\n * @return {MultiToken[]} tokens\n */\nfunction tokenize(str) {\n  if (!INIT.initialized) {\n    init();\n  }\n  return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));\n}\ntokenize.scan = run$1; // for testing\n\n/**\n * Find a list of linkable items in the given string.\n * @param {string} str string to find links in\n * @param {string | Opts} [type] either formatting options or specific type of\n * links to find, e.g., 'url' or 'email'\n * @param {Opts} [opts] formatting options for final output. Cannot be specified\n * if opts already provided in `type` argument\n */\nfunction find(str, type = null, opts = null) {\n  if (type && typeof type === 'object') {\n    if (opts) {\n      throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);\n    }\n    opts = type;\n    type = null;\n  }\n  const options = new Options(opts);\n  const tokens = tokenize(str);\n  const filtered = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.isLink && (!type || token.t === type) && options.check(token)) {\n      filtered.push(token.toFormattedObject(options));\n    }\n  }\n  return filtered;\n}\n\n/**\n * Is the given string valid linkable text of some sort. Note that this does not\n * trim the text for you.\n *\n * Optionally pass in a second `type` param, which is the type of link to test\n * for.\n *\n * For example,\n *\n *     linkify.test(str, 'email');\n *\n * Returns `true` if str is a valid email.\n * @param {string} str string to test for links\n * @param {string} [type] optional specific link type to look for\n * @returns boolean true/false\n */\nfunction test(str, type = null) {\n  const tokens = tokenize(str);\n  return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);\n}\n\nexport { MultiToken, Options, State, createTokenClass, find, init, multi, options, regexp, registerCustomProtocol, registerPlugin, registerTokenPlugin, reset, stringToArray, test, multi as text, tokenize };\n","import * as React from 'react';\nimport { Options, tokenize } from 'linkifyjs';\n\n/**\n * Given a string, converts to an array of valid React components\n * (which may include strings)\n * @param {string} str\n * @param {Options} opts\n * @param {{ [elementId: string]: number }} meta\n * @returns {React.ReactNodeArray}\n */\nfunction stringToElements(str, opts, meta) {\n  const tokens = tokenize(str);\n  const elements = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.t === 'nl' && opts.get('nl2br')) {\n      const key = `__linkify-el-${meta.elementId++}`;\n      elements.push(React.createElement('br', {\n        key\n      }));\n    } else if (!token.isLink || !opts.check(token)) {\n      // Regular text\n      elements.push(token.toString());\n    } else {\n      let rendered = opts.render(token);\n      if (!('key' in rendered.props)) {\n        // Ensure generated element has unique key\n        const key = `__linkify-el-${meta.elementId++}`;\n        const props = Object.assign({\n          key\n        }, rendered.props);\n        rendered = React.cloneElement(rendered, props);\n      }\n      elements.push(rendered);\n    }\n  }\n  return elements;\n}\n\n// Recursively linkify the contents of the given React Element instance\n/**\n * @template P\n * @template {string | React.JSXElementConstructor<P>} T\n * @param {React.ReactElement<P, T>} element\n * @param {Options} opts\n * @param {{ [elementId: string]: number }} meta\n * @returns {React.ReactElement<P, T>}\n */\nfunction linkifyReactElement(element, opts, meta) {\n  if (React.Children.count(element.props.children) === 0) {\n    // No need to clone if the element had no children\n    return element;\n  }\n  const children = [];\n  React.Children.forEach(element.props.children, child => {\n    if (typeof child === 'string') {\n      // ensure that we always generate unique element IDs for keys\n      children.push.apply(children, stringToElements(child, opts, meta));\n    } else if (React.isValidElement(child)) {\n      if (typeof child.type === 'string' && opts.ignoreTags.indexOf(child.type.toUpperCase()) >= 0) {\n        // Don't linkify this element\n        children.push(child);\n      } else {\n        children.push(linkifyReactElement(child, opts, meta));\n      }\n    } else {\n      // Unknown element type, just push\n      children.push(child);\n    }\n  });\n\n  // Set a default unique key, copy over remaining props\n  const key = `__linkify-el-${meta.elementId++}`;\n  const newProps = Object.assign({\n    key\n  }, element.props);\n  return React.cloneElement(element, newProps, children);\n}\n\n/**\n * @template P\n * @template {string | React.JSXElementConstructor<P>} T\n * @param {P & { as?: T, tagName?: T, options?: import('linkifyjs').Opts, children?: React.ReactNode}} props\n * @returns {React.ReactElement<P, T>}\n */\nconst Linkify = props => {\n  // Copy over all non-linkify-specific props\n  let linkId = 0;\n  const defaultLinkRender = ({\n    tagName,\n    attributes,\n    content\n  }) => {\n    attributes.key = `__linkify-lnk-${linkId++}`;\n    if (attributes.class) {\n      attributes.className = attributes.class;\n      delete attributes.class;\n    }\n    return React.createElement(tagName, attributes, content);\n  };\n  const newProps = {\n    key: '__linkify-wrapper'\n  };\n  for (const prop in props) {\n    if (prop !== 'options' && prop !== 'as' && prop !== 'tagName' && prop !== 'children') {\n      newProps[prop] = props[prop];\n    }\n  }\n  const opts = new Options(props.options, defaultLinkRender);\n  const as = props.as || props.tagName || React.Fragment || 'span';\n  const children = props.children;\n  const element = React.createElement(as, newProps, children);\n  return linkifyReactElement(element, opts, {\n    elementId: 0\n  });\n};\n\nexport { Linkify as default };\n","import \"./console-log-card.scss\";\n\nimport Linkify from \"linkify-react\";\nimport {\n  lazy,\n  MouseEvent as ReactMouseEvent,\n  Suspense,\n  useEffect,\n} from \"react\";\n\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport Tooltip from \"../../../common/components/tooltip.tsx\";\nimport { LocalizedMessageKey, useMessages } from \"../../../common/i18n\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { linkifyJsOptions } from \"../../../common/utils/linkify-js.ts\";\nimport LiveTotal from \"../../../common/utils/live-total.tsx\";\nimport {\n  LOG_FETCH_SIZE,\n  StepInfo,\n  StepLogBufferInfo,\n  TAIL_CONSOLE_LOG,\n} from \"./PipelineConsoleModel.tsx\";\nimport InputStep from \"./steps/InputStep.tsx\";\n\nconst ConsoleLogStream = lazy(() => import(\"./ConsoleLogStream.tsx\"));\n\nexport default function ConsoleLogCard({\n  step,\n  stepBuffer,\n  isExpanded,\n  onMoreConsoleClick,\n  onStepToggle,\n  fetchExceptionText,\n}: ConsoleLogCardProps) {\n  useEffect(() => {\n    if (isExpanded) {\n      onMoreConsoleClick(step.id, TAIL_CONSOLE_LOG);\n    }\n  }, [isExpanded, onMoreConsoleClick, step.id, stepBuffer]);\n\n  const handleToggle = (e: ReactMouseEvent<HTMLElement>) => {\n    // Only prevent left clicks\n    if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n      return;\n    }\n\n    e.preventDefault();\n\n    history.replaceState({}, \"\", `?selected-node=` + step.id);\n\n    onStepToggle(step.id);\n  };\n\n  const messages = useMessages();\n\n  const inputStep = step.inputStep;\n  if (inputStep && !inputStep.parameters) {\n    return <InputStep step={step} />;\n  }\n\n  return (\n    <div className={\"pgv-step-detail-group\"} key={`step-card-${step.id}`}>\n      <div\n        className={classNames(\"pgv-step-detail-header\", \"jenkins-button\", {\n          \"jenkins-button--tertiary\": !isExpanded,\n        })}\n      >\n        <a\n          href={`?selected-node=` + step.id}\n          onClick={handleToggle}\n          key={`step-action-area-${step.id}`}\n        >\n          <div className=\"pgv-step-detail-header__content\">\n            <StatusIcon status={step.state} percentage={step.completePercent} />\n\n            {step.title !== \"\" && (\n              <span>\n                <Linkify options={linkifyJsOptions}>{step.title}</Linkify>\n              </span>\n            )}\n\n            {step.name !== \"\" && (\n              <span>\n                <Linkify options={linkifyJsOptions}>{step.name}</Linkify>\n              </span>\n            )}\n\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 512 512\"\n              className={\"pgv-step-detail-header__chevron\"}\n              style={{ rotate: isExpanded ? \"90deg\" : \"0deg\" }}\n            >\n              <path\n                fill=\"none\"\n                stroke=\"var(--text-color-secondary)\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                opacity={0.75}\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </div>\n\n          <div className=\"pgv-step-detail-header__actions\">\n            <span\n              style={{\n                color: \"var(--text-color-secondary)\",\n                fontWeight: \"normal\",\n              }}\n            >\n              <LiveTotal\n                total={step.totalDurationMillis}\n                start={step.startTimeMillis}\n              />\n            </span>\n          </div>\n        </a>\n\n        <Tooltip content={messages.format(LocalizedMessageKey.consoleNewTab)}>\n          <a\n            href={`log?nodeId=${step.id}`}\n            className={\"jenkins-button jenkins-button--tertiary\"}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            aria-label={messages.format(LocalizedMessageKey.consoleNewTab)}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M384 224v184a40 40 0 01-40 40H104a40 40 0 01-40-40V168a40 40 0 0140-40h167.48M336 64h112v112M224 288L440 72\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"32\"\n              />\n            </svg>\n          </a>\n        </Tooltip>\n      </div>\n\n      {isExpanded && (\n        <ConsoleLogBody\n          step={step}\n          stepBuffer={stepBuffer}\n          onMoreConsoleClick={onMoreConsoleClick}\n          fetchExceptionText={fetchExceptionText}\n          isExpanded={false}\n          onStepToggle={onStepToggle}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction ConsoleLogBody({\n  step,\n  stepBuffer,\n  onMoreConsoleClick,\n  fetchExceptionText,\n}: ConsoleLogCardProps) {\n  const prettySizeString = (size: number) => {\n    const kib = 1024;\n    const mib = 1024 * 1024;\n    const gib = 1024 * 1024 * 1024;\n    if (size < kib) return `${size}B`;\n    if (size < mib) return `${(size / kib).toFixed(2)}KiB`;\n    if (size < gib) return `${(size / mib).toFixed(2)}MiB`;\n    return `${(size / gib).toFixed(2)}GiB`;\n  };\n\n  const showMoreLogs = () => {\n    let startByte = stepBuffer.startByte - LOG_FETCH_SIZE;\n    if (startByte < 0) startByte = 0;\n    onMoreConsoleClick(step.id, startByte);\n  };\n\n  const getTruncatedLogWarning = () => {\n    if (stepBuffer.lines && stepBuffer.startByte > 0) {\n      return (\n        <button\n          onClick={showMoreLogs}\n          className={\n            \"pgv-show-more-logs jenkins-button jenkins-!-warning-color\"\n          }\n        >\n          There’s more to see - {prettySizeString(stepBuffer.startByte)} of logs\n          hidden\n        </button>\n      );\n    }\n    return undefined;\n  };\n\n  return (\n    <div style={{ paddingTop: \"0.5rem\" }}>\n      {getTruncatedLogWarning()}\n      <Suspense>\n        <ConsoleLogStream\n          logBuffer={stepBuffer}\n          onMoreConsoleClick={onMoreConsoleClick}\n          fetchExceptionText={fetchExceptionText}\n          step={step}\n        />\n      </Suspense>\n    </div>\n  );\n}\n\nexport type ConsoleLogCardProps = {\n  step: StepInfo;\n  stepBuffer: StepLogBufferInfo;\n  isExpanded: boolean;\n  onStepToggle: (nodeId: string) => void;\n  onMoreConsoleClick: (nodeId: string, startByte: number) => void;\n  fetchExceptionText: (nodeId: string) => void;\n};\n","import \"./stage-steps.scss\";\n\nimport { StepInfo, StepLogBufferInfo } from \"../../../common/RestClient.tsx\";\nimport ConsoleLogCard from \"./ConsoleLogCard.tsx\";\nimport { StageInfo, TAIL_CONSOLE_LOG } from \"./PipelineConsoleModel.tsx\";\n\nexport default function StageSteps({\n  stage,\n  stepBuffers,\n  steps,\n  onStepToggle,\n  expandedSteps,\n  onMoreConsoleClick,\n  fetchExceptionText,\n}: StageStepsProps) {\n  if (steps.length === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className={\"pgv-stage-steps\"}\n      key={`stage-steps-container-${stage ? stage.id : \"unk\"}`}\n    >\n      {steps.map((stepItemData) => {\n        return (\n          <ConsoleLogCard\n            step={stepItemData}\n            stepBuffer={\n              stepBuffers.get(stepItemData.id) ?? {\n                lines: [],\n                startByte: 0,\n                endByte: TAIL_CONSOLE_LOG,\n              }\n            }\n            onStepToggle={onStepToggle}\n            isExpanded={expandedSteps.includes(stepItemData.id)}\n            onMoreConsoleClick={onMoreConsoleClick}\n            fetchExceptionText={fetchExceptionText}\n            key={`step-console-card-${stepItemData.id}`}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\ninterface StageStepsProps {\n  stage: StageInfo | null;\n  steps: Array<StepInfo>;\n  stepBuffers: Map<string, StepLogBufferInfo>;\n  expandedSteps: string[];\n  onStepToggle: (nodeId: string) => void;\n  onMoreConsoleClick: (nodeId: string, startByte: number) => void;\n  fetchExceptionText: (nodeId: string) => void;\n}\n","import {\n  StageInfo,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"./PipelineConsoleModel.tsx\";\nimport StageDetails from \"./stage-details.tsx\";\nimport StageSteps from \"./stage-steps.tsx\";\n\nexport default function StageView(props: StageViewProps) {\n  return (\n    <>\n      <StageDetails stage={props.stage} />\n      <StageSteps\n        stage={props.stage}\n        steps={props.steps}\n        stepBuffers={props.stepBuffers}\n        expandedSteps={props.expandedSteps}\n        onStepToggle={props.onStepToggle}\n        onMoreConsoleClick={props.onMoreConsoleClick}\n        fetchExceptionText={props.fetchExceptionText}\n      />\n    </>\n  );\n}\n\nexport interface StageViewProps {\n  stage: StageInfo | null;\n  steps: Array<StepInfo>;\n  stepBuffers: Map<string, StepLogBufferInfo>;\n  expandedSteps: string[];\n  onStepToggle: (nodeId: string) => void;\n  onMoreConsoleClick: (nodeId: string, startByte: number) => void;\n  fetchExceptionText: (nodeId: string) => void;\n}\n","import \"./pipeline-console.scss\";\nimport \"../../../pipeline-graph-view/app.scss\";\nimport \"../../../pipeline-graph-view/pipeline-graph/styles/main.scss\";\n\nimport Dropdown from \"../../../common/components/dropdown.tsx\";\nimport DropdownPortal from \"../../../common/components/dropdown-portal.tsx\";\nimport {\n  CONSOLE,\n  DOCUMENT,\n  SETTINGS,\n} from \"../../../common/components/symbols.tsx\";\nimport { useUserPermissions } from \"../../../common/user/user-permission-provider.tsx\";\nimport Skeleton from \"./components/skeleton.tsx\";\nimport Stages from \"./components/stages.tsx\";\nimport StagesCustomization from \"./components/stages-customization.tsx\";\nimport DataTreeView from \"./DataTreeView.tsx\";\nimport { useStepsPoller } from \"./hooks/use-steps-poller.ts\";\nimport { NoStageStepsFallback } from \"./NoStageStepsFallback.tsx\";\nimport { useLayoutPreferences } from \"./providers/user-preference-provider.tsx\";\nimport ScrollToTopBottom from \"./scroll-to-top-bottom.tsx\";\nimport SplitView from \"./split-view.tsx\";\nimport StageView from \"./StageView.tsx\";\n\nexport default function PipelineConsole() {\n  const rootElement = document.getElementById(\"console-pipeline-root\");\n  const currentRunPath = rootElement?.dataset.currentRunPath!;\n  const previousRunPath = rootElement?.dataset.previousRunPath;\n\n  const { stageViewPosition, mainViewVisibility } = useLayoutPreferences();\n  const {\n    openStage,\n    openStageSteps,\n    openStageStepBuffers,\n    expandedSteps,\n    stages,\n    handleStageSelect,\n    onStepToggle,\n    onMoreConsoleClick,\n    fetchExceptionText,\n    loading,\n  } = useStepsPoller({ currentRunPath, previousRunPath });\n\n  const showSplitView = loading || (!loading && stages.length > 0);\n\n  const isOnlyPlaceholderNode = stages.length === 1 && stages[0].placeholder;\n\n  const { canConfigure } = useUserPermissions();\n\n  return (\n    <>\n      <DropdownPortal\n        container={document.getElementById(\"console-pipeline-overflow-root\")}\n      >\n        <Dropdown\n          items={[\n            showSplitView ? (\n              <StagesCustomization key=\"visibility-select\" />\n            ) : (\n              <></>\n            ),\n            {\n              text: \"View as plain text\",\n              icon: DOCUMENT,\n              href: `../consoleText`,\n            },\n            {\n              text: \"View classic console\",\n              icon: CONSOLE,\n              href: `../console`,\n            },\n            canConfigure ? (\n              {\n                text: \"Configure\",\n                icon: SETTINGS,\n                href: `../../configure`,\n              }\n            ) : (\n              <></>\n            ),\n          ]}\n        />\n      </DropdownPortal>\n\n      {showSplitView && (\n        <SplitView\n          direction={stageViewPosition === \"top\" ? \"vertical\" : \"horizontal\"}\n          storageKey=\"graph\"\n        >\n          {!isOnlyPlaceholderNode &&\n            (mainViewVisibility === \"both\" ||\n              mainViewVisibility === \"graphOnly\") &&\n            (loading ? (\n              <Skeleton />\n            ) : (\n              <Stages\n                stages={stages}\n                selectedStage={openStage || undefined}\n                stageViewPosition={stageViewPosition}\n                onStageSelect={handleStageSelect}\n              />\n            ))}\n\n          <SplitView storageKey=\"stages\">\n            {(mainViewVisibility === \"both\" ||\n              mainViewVisibility === \"stagesOnly\") &&\n              !isOnlyPlaceholderNode && (\n                <div\n                  key=\"tree-view\"\n                  id=\"tree-view-pane\"\n                  className=\"pgv-sticky-sidebar\"\n                >\n                  {loading ? (\n                    <div className={\"pgv-skeleton-column\"}>\n                      <Skeleton height={2.625} />\n                      <Skeleton height={20} />\n                    </div>\n                  ) : (\n                    <DataTreeView\n                      onNodeSelect={(_, nodeId) => handleStageSelect(nodeId)}\n                      selected={openStage?.id}\n                      stages={stages}\n                    />\n                  )}\n                </div>\n              )}\n\n            <div key=\"stage-view\" id=\"stage-view-pane\">\n              {loading ? (\n                <div className={\"pgv-skeleton-column\"}>\n                  <Skeleton height={2.625} />\n                  <Skeleton height={20} />\n                </div>\n              ) : (\n                <StageView\n                  stage={openStage}\n                  steps={openStageSteps}\n                  stepBuffers={openStageStepBuffers}\n                  expandedSteps={expandedSteps}\n                  onStepToggle={onStepToggle}\n                  onMoreConsoleClick={onMoreConsoleClick}\n                  fetchExceptionText={fetchExceptionText}\n                />\n              )}\n            </div>\n          </SplitView>\n        </SplitView>\n      )}\n\n      {!loading && stages.length === 0 && <NoStageStepsFallback />}\n\n      <ScrollToTopBottom />\n    </>\n  );\n}\n","import {\n  I18NProvider,\n  LocaleProvider,\n  ResourceBundleName,\n} from \"../common/i18n/index.ts\";\nimport { UserPermissionsProvider } from \"../common/user/user-permission-provider.tsx\";\nimport { UserPreferencesProvider } from \"../common/user/user-preferences-provider.tsx\";\nimport PipelineConsole from \"./pipeline-console/main/PipelineConsole.tsx\";\nimport { FilterProvider } from \"./pipeline-console/main/providers/filter-provider.tsx\";\nimport { LayoutPreferencesProvider } from \"./pipeline-console/main/providers/user-preference-provider.tsx\";\n\nexport default function App() {\n  const locale = document.getElementById(\"console-pipeline-root\")!.dataset\n    .userLocale!;\n  return (\n    <UserPermissionsProvider>\n      <LocaleProvider locale={locale}>\n        <I18NProvider bundles={[ResourceBundleName.messages]}>\n          <FilterProvider>\n            <UserPreferencesProvider>\n              <LayoutPreferencesProvider>\n                <PipelineConsole />\n              </LayoutPreferencesProvider>\n            </UserPreferencesProvider>\n          </FilterProvider>\n        </I18NProvider>\n      </LocaleProvider>\n    </UserPermissionsProvider>\n  );\n}\n","import { createRoot } from \"react-dom/client\";\n\nimport App from \"./app.tsx\";\n\nconst rootElement = document.getElementById(\"console-pipeline-root\");\nif (!rootElement) throw new Error(\"Failed to find the root element\");\nconst root = createRoot(rootElement);\n\n// Render App\nroot.render(<App />);\n"],"file":"pipeline-console-view-bundle.js"}